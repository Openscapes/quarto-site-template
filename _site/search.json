[
  {
    "objectID": "transition-from-rmarkdown.html",
    "href": "transition-from-rmarkdown.html",
    "title": "Transition from RMarkdown",
    "section": "",
    "text": "You may already have workflows in RMarkdown and are interested in transitioning to Quarto. There‚Äôs no hurry to migrate to Quarto. Keep using Rmarkdown and when you‚Äôre ready the migration will be fine.\nHere are some notes as we migrate RMarkdown sites and books.\nTODO: translating R code chunks"
  },
  {
    "objectID": "transition-from-rmarkdown.html#bookdown-to-quarto",
    "href": "transition-from-rmarkdown.html#bookdown-to-quarto",
    "title": "Transition from RMarkdown",
    "section": "Bookdown to Quarto",
    "text": "Bookdown to Quarto\nConverting a Bookdown book to Quarto is slightly more involved than converting a website. A book has chapters whose order must be defined, and likely has citations and cross-refs. Still, conversion is not that hard.\nWe got some practice converting from Bookdown to Quarto by helping Gavin Fay convert his lab‚Äôs fantastic onboarding documentation, the Faylab Lab Manual. Here‚Äôs the GitHub view before and after.\nOur best first reference material for this was Nick Tierney‚Äôs Notes on Changing from Rmarkdown/Bookdown to Quarto. Nick shares some scripts in that post to automate some changes. In our case, the book was small enough that we made all changes manually. Quarto documentation was indispensable.\n\nExperimenting in a low-risk environment\nWe forked a copy of the Faylab Lab manual to the Openscapes organization, and worked in a branch so we could make changes relatively risk-free. We could always fork a new copy of the original if we ‚Äúbroke‚Äù something. (Caution: the default when making a pull request from a fork is to push changes to the original upstream repo, not your fork and it does this without warning if you have write-access to that repo.) With local previews it‚Äôs easy to test / play with settings to see what they do. We tended to make a change, Preview, then compare the look and functionality of the book to the original. It was helpful to comment out some elements of the configuration file _output.yml after their counterparts had been added to the Quarto configuration file _quarto.yml, or to confirm they were no longer needed, before making the drastic move of deleting them.\n\n\nThe conversion\nHere are the main steps to convert the Faylab Lab manual from Bookdown to Quarto.\nCreate new empty file called _quarto.yml and add book metadata there. The screenshots below\nSet project type as book.\nMove metadata out of index.qmd and into _quarto.yml. Title, author, and publication date were in index.qmd with date set using date: \"Last updated:r Sys.Date()\". Now these are in _quarto.yml with date set using date: last-modified. Note that having R code would require you to adjust code chunk options in the Quarto style (#|). This tripped us up a bit; see GitHub Actions.\nMove chapters listing out of _bookdown.yml and into _quarto.yml.\nAdd page footer to _quarto.yml.\nHere‚Äôs what ours looked like when we finished the steps above (_quarto.yml).\n\n\n\n\n\n\n\n\n\n_quarto.yml contents\n\n\n\n\n\n\n\nFaylab Lab Manual\n\n\n\n\n\nChange insertion of images from html style to Quarto style. (Note Quarto calls them ‚Äúfigures‚Äù, not ‚Äúimages‚Äù.) The following snippet will insert the GitHub octocat logo in a page:\n![](https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png){fig-align=\"left\" width=\"35px\"}\nChange all filename extensions .Rmd -&gt; .qmd (you could Preview after this change and see that the book looks the same). Note that Quarto works with .Rmd files just as well as it does .qmd, so this change is not urgent. In fact, if you have a lot of R code in your .Rmds (unlike the Faylab Lab Manual), there will be additional tinkering needed to make the code chunks happy.\n\n\nCitations\nThe Faylab Lab Manual cited two papers, presenting us with an opportunity to see how easy it is to add references to a Quarto book. Briefly, in the Visual Editor, Insert &gt; Citation &gt; DOI. Pasting the DOI or its full URL, we can insert the citation. This automatically creates a references.bib file and adds the full citations at the bottom of the chapter page (watch demo). In July 2022, we had to manually add a ## References heading, but this may not be necessary in future Quarto updates.\n\n\n\n\n\n\n\n\n\nInsert citation via its DOI using RStudio Visual Editor\n\n\n\n\n\n\n\n\n\n\nPublishing notes\nIf the book‚Äôs output is strictly html, there‚Äôs no need to specify output-dir in _quarto.yml. The output directory default is _book/, which is what we‚Äôd like. If we wanted other types of output like like PDF or EPUB, etc. those single file outputs are also written to the output-dir (Quarto docs).\nIf you currently have a docs/ folder, delete it.\nUpdate .gitignore to ignore _book/. At the same time, we have it ignore caches and a .quarto file:\n/.quarto/\n*_cache/\n_book/\nOnce all is settled, delete _output.yml.\nOnce the Openscapes fork was fully reviewed, we made a pull request from that to the main branch of the book‚Äôs repo. Once that was merged, we set up GitHub Actions to render the book. (TODO: instructions for GitHub Actions)\n\n\nGitHub Actions\nThis book was mostly prose and screenshots without any R code. This made the conversion from RMarkdown to Quarto likely more straightforward than if you also needed to adjust code chunk options in the quarto style (#|). Our initial GitHub Action to render the converted Faylab Lab Manual failed because we had a piece of R code - even though the code was commented out! This was resolved when we deleted the line."
  },
  {
    "objectID": "transition-from-rmarkdown.html#distill-to-quarto",
    "href": "transition-from-rmarkdown.html#distill-to-quarto",
    "title": "Transition from RMarkdown",
    "section": "Distill to quarto",
    "text": "Distill to quarto\nWe transitioned our events site from distill to quarto in May 2022 (github view before and after). We followed excellent notes and examples from Nick Tierney and Danielle Navarro.\nAfter we had changed all the files, the Build tab in the RStudio IDE still showed ‚ÄúBuild website‚Äù rather then ‚ÄúRender Website‚Äù and ‚ÄúPreview Website‚Äù, and would error when we pushed them (because that button was expecting a distill site, not a quarto site). To fix this, we updated the .Rproj file. Clicking on the .Rproj file in the RStudio IDE will open a dialog box where you can click things you want (you can also open these in a text editor or from the GitHub website to see the actual text). To fix this situation with the Build tab: Project Options &gt; Build Tools &gt; Project Build Tools &gt; None.\nLooking at files /posts/_metadata.yml and _quarto.yml helps see where things are defined. For example, to make event post citations appear, we added citation: true to /posts/_metadata.yml and in _quarto.yml under the website key we set site-url: https://openscapes.github.io/events. We deleted footer.html used with distill because footer is now defined in quarto.yml.\n\nPublishing notes\n\nBackground: Our distill site had been set up to output to a docs folder, and had GitHub Settings &gt; Pages set to look there rather gh-pages branch. (Julie note: this was a new-to-me capability when we set up the events distill site in Spring 2021 so I had forgotten that was an option). We‚Äôve inititally kept this same set-up for now with our events page in _quarto.yml: output-dir: docs. However, this is sub-optimal; better to not have to commit and push these files but to instead have a GitHub Action generate them upon a commit. So the following is what we did -\n\nDon‚Äôt specify output-dir in _quarto.yml. The output directory default is _site/, which is what we‚Äôd like.\nIf you currently have a docs/ folder (like we did as we were experimenting), delete it.\nUpdate .gitignore to ignore _site/. At the same time, we have it ignore caches and a .quarto file:\n/.quarto/\n*_cache/\n_site/\nPush these changes, merge into main.\nOn GitHub.com, in your repo, set up GitHub publishing\nFollow instructions from the explore and setup chapter."
  },
  {
    "objectID": "transition-from-rmarkdown.html#troubleshooting",
    "href": "transition-from-rmarkdown.html#troubleshooting",
    "title": "Transition from RMarkdown",
    "section": "Troubleshooting",
    "text": "Troubleshooting\n\nGitHub Action fails, says you need RMarkdown but you don‚Äôt have R code!\nAnd you changed all .Rmds to .qmds!\nYou likely have a few setup code chunks from RMarkdown, that look like this:\n{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE)\nYou can find them by opening each of your files and having a look, or use GitHub‚Äôs search for the keyword knitr"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Communicating Research Effectively with R",
    "section": "",
    "text": "üóì February 07, 2024\n‚è∞ 09:00 - 17:00\nüìç Kasturba Medical College, Mangalore, Karnataka, India\nWelcome to ‚ÄúCommunicating Research Effectively with R!!‚Äù. This workshop is part of the IAPSMCON 2024 pre-conference workshops at KMC, Mangalore.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#what-is-quarto",
    "href": "index.html#what-is-quarto",
    "title": "Communicating Research Effectively with R",
    "section": "What is Quarto?",
    "text": "What is Quarto?\nQuarto helps you have your ideas and your code in one place, and present it in a beautiful way.\nQuarto unifies and extends the RMarkdown ecosystem - it unifies by combining the functionality of R Markdown, bookdown, distill, xaringian, etc into a single consistent system. And it extends in several ways: all features are possible beyond R too, including Python and Javascript. It also has more ‚Äúguardrails‚Äù: accessibility and inclusion are centered in the design. Quarto is for people who love RMarkdown, and it‚Äôs for people who have never used RMarkdown.\nThe ability for Quarto to streamline collaboration has been so cool and important for our NASA Openscapes project. Quarto has been a common place for us to collaborate - across R and Python languages and coding expertise.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#what-is-this-tutorial",
    "href": "index.html#what-is-this-tutorial",
    "title": "Communicating Research Effectively with R",
    "section": "What is this tutorial?",
    "text": "What is this tutorial?\nThis is a 1-hour tutorial that can be used to teach or as self-paced learning.\nWe introduce Quarto by exploring this tutorial website, and practicing the basic Quarto workflow using different tools (GitHub browser, RStudio, and Jupyter) for editing your website.\nWe‚Äôll start off from the browser so you don‚Äôt need to install any additional software, however this approach is very limited and you will soon outgrow its capabilities. If you don‚Äôt already have a workflow to edit files and sync to GitHub from your computer, I recommend RStudio. You don‚Äôt need to know R to use RStudio, and it has powerful editor features that make for happy workflows.\nQuarto.org is the go-to place for full documentation and more tutorials!",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#example-quarto-sites",
    "href": "index.html#example-quarto-sites",
    "title": "Communicating Research Effectively with R",
    "section": "Example Quarto sites",
    "text": "Example Quarto sites\nA few Quarto websites from Openscapes - so far we have been using Quarto for documentation using Quarto and Markdown files and Jupyter Notebooks.\n\nChampions Lessons Series\nOpenscapes Approach Guide\n\n2021 NASA Cloud Hackathon\nFaylab Lab Manual\nA Quarto tip a day, by Mine √áetinkaya-Rundel",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "Communicating Research Effectively with R",
    "section": "About",
    "text": "About\nOpenscapes is about better science for future us. We help researchers reimagine data analysis, develop modern skills that are of immediate value to them, and cultivate collaborative and inclusive research teams as part of the broader global open movement.\nWe‚Äôre developing this tutorial to help folks with different levels of technical skills use Quarto for documentation and tutorial building. This tutorial was originally created for several different audiences: NASA-Openscapes researcher support engineers using Python, communications directors at organizations promoting open science who do not identify as coders, and fisheries scientists curious about transitioning from RMarkdown. We‚Äôre hoping it‚Äôs useful to folks with backgrounds as wide as these; if you find it useful or have suggestions for improvement, please let us know by clicking ‚ÄúEdit this page‚Äù or ‚ÄúReport an issue‚Äù at the upper right side of any page.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "learning-more.html",
    "href": "learning-more.html",
    "title": "Learning more",
    "section": "",
    "text": "An excellent overview: Reproducible authoring with Quarto - Mine √áetinkaya-Rundel, Feb 2022 - slides, youtube\nA Quarto tip a day in June 2022, from Mine √áetinkaya-Rundel.\n\n\n\nOpenscapes Champions Lessons Series\nOpenscapes Approach Guide\n\nNASA Earthdata Cloud Cookbook\n\nSee many more examples at the quarto gallery!\n\n\n\nAre you making onboarding documentation? Check out The Fay Lab Manual (now in Quarto!) for inspiration on structure - you could also start there and make it your own."
  },
  {
    "objectID": "explore.html",
    "href": "explore.html",
    "title": "Explore and setup",
    "section": "",
    "text": "With this tutorial, we have a working example website that we will explore together. We‚Äôll learn a few rules and look for patterns to get an understanding of what things to do to help you start customizing and making it your own. And you can continue to use this website as a reference after the tutorial, along with Quarto documentation.\nWe‚Äôll start our exploration online looking at the website architecture and GitHub repository. Then we‚Äôll setup a copy for ourselves so that we can modify from a working example, which is a great way to learn something new. We‚Äôll set it up so that any modifications (commits) will automatically be republished via GitHub Actions. Subsequent chapters will describe how to modify your repo using different tools (browser, RStudio, Jupyter)."
  },
  {
    "objectID": "explore.html#exploring-online",
    "href": "explore.html#exploring-online",
    "title": "Explore and setup",
    "section": "Exploring online",
    "text": "Exploring online\n\nThe website itself\nThis website has 5 things you can see on the left sidebar:\n\nWelcome\nExploring and setup\nQuarto workflows\nLearning more\nTransition from Rmd\n\nMost of these are pages, but you‚Äôll see that ‚ÄúQuarto Workflows‚Äù has an arrow &gt;; it is a folder with additional pages inside.\n\n\nThe website‚Äôs repo\nLet‚Äôs go to this website‚Äôs GitHub repository (also called a ‚Äúrepo‚Äù), https://github.com/openscapes/quarto-website-tutorial. You can also click there from any page in this tutorial website by clicking the GitHub octocat icon underneath the Openscapes logo in the left navbar (click it holding command on Mac, or control on a PC to open it in a different tab in your browser).\nHave a look at the filenames. We can recognize the names of the webpages we‚Äôve seen above, and they have red arrows marking them in the image below. You‚Äôll see the ‚Äúquarto-workflows‚Äù folder and the rest in this site are .qmd files, which are plain text Quarto files that can combine Markdown text with code. index.qmd is the home page. If you click inside ‚Äúquarto-workflows‚Äù you‚Äôll see a mix of filetypes!\n\n\n\nquarto-website-tutorial GitHub repository with files for webpages marked with red arrows\n\n\nThe _site folder has html files with names that should be familiar: they match the .qmd files we were just exploring. This folder is where Quarto stores files to build the website."
  },
  {
    "objectID": "explore.html#quarto.yml-intro",
    "href": "explore.html#quarto.yml-intro",
    "title": "Explore and setup",
    "section": "_quarto.yml intro",
    "text": "_quarto.yml intro\nThere is also a _quarto.yml file, which is the website‚Äôs configuration file. It is essentially metadata for the website that includes the order that the pages/chapters will be in. This is where you update the organization of your website: which page comes before another. If we compare side-by-side, you‚Äôll see that the pages that appear on our website are listed there.\n\n\n\n_quarto.yml and website side-by-side\n\n\nWe‚Äôll learn more about how to interact with _quarto.yml in Quarto Workflows."
  },
  {
    "objectID": "explore.html#fork-to-your-account",
    "href": "explore.html#fork-to-your-account",
    "title": "Explore and setup",
    "section": "Fork to your account",
    "text": "Fork to your account\nLet‚Äôs start with an existing Quarto site and copy it into your space to edit. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username).\nFirst, choose an existing website to copy. The simplest option is to start with this site: quarto-website-tutorial.\nOther options of potential interest:\n\n2021-Cloud-Hackathon\n2022-SWOT-Ocean-Cloud-Workshop\nOpenscapes Approach-Guide\n\nNext, follow these steps to fork and setup your repo with GitHub Actions from Gavin Fay, using the repo you chose. These instructions will take ~5 minutes.\nNow you‚Äôve got a copy of your repo of choice in your own GitHub account, and you‚Äôre set to start making your own edits. Your GitHub repo is set up with a GitHub Action that will use Quarto to rebuild and republish your site anytime you make a commit: committing will trigger the GitHub Action to rebuild and republish the book.\nNote that the GitHub Action for this book does not include R or Python so those will need to be added if your website relies on code. See https://github.com/r-lib/actions for more details and examples.\n\nDownload instead of fork\nForking might not always be the way to go - you can‚Äôt fork into the same GitHub user account or organization so if for example you want to make a copy of 2021-Cloud-Hackathon repo within the same NASA-Openscapes GitHub Organization, you‚Äôll need to download instead of fork. In this case, follow these steps to download and copy into a new repository, and set up the GitHub Action and the gh-pages branch for publishing, separately.\n\nDownload github repo files\nNavigate to https://github.com/openscapes/quarto-website-tutorial (or any other quarto site repo of choice). Click the green ‚ÄúCode‚Äù button and select ‚ÄúDownload ZIP‚Äù. When it downloads on your computer, unzip the files.\n\n\nCreate a new GitHub repo\nNavigate to your GitHub account or organization, and create a new repository, naming it what you‚Äôd like. You‚Äôll need a free GitHub account that you create at github.com (follow this advice about choosing your username). When you‚Äôre logged in, github.com will show a green button that says ‚ÄúNew‚Äù which you‚Äôll also see as you navigate to your username‚Äôs repository page.\n\n\nAdd original site files\nIf you‚Äôre comfortable cloning the new repository and copying files into it locally before committing and pushing back to GitHub, that is preferable to the GitHub file uploader, which does have limitations with complex repos. The uploader does not allow upload of folders, so some manual work would be required.\nTo use the GitHub file uploader, click the button next to the green ‚ÄúCode‚Äù button that says ‚ÄúAdd file‚Äù. Add file &gt; Upload files. Then, on your computer, select all the files in unzipped folder (command-A or control-A), and drag them to the GitHub uploader page. Scroll down to write a commit message, which effectively saves your files when you‚Äôre working in the browser."
  },
  {
    "objectID": "explore.html#setup-github-action",
    "href": "explore.html#setup-github-action",
    "title": "Explore and setup",
    "section": "Set up GitHub publishing",
    "text": "Set up GitHub publishing\nIf you‚Äôve used the ‚ÄòFork to your account approach‚Äô above, your website is all set!\nIf you‚Äôve set up your repo by using the ‚ÄòDownload github repo files‚Äô approach above, you‚Äôll need to set up GitHub publishing separately. We‚Äôll do this in a few steps: we‚Äôll set up a GitHub Action within your repo, and create a gh-pages branch.\nFirst, the GitHub Action. Go back to your main view of your GitHub repository by clicking on the name of your repository at the top-left (the url in your browser window should say https://github.com/username/repo-name).\nNext to the green code button, click Add file &gt; Create new file. Name it exactly this: .github/workflows/quarto-publish.yml . In detail: start by typing the . with github and when you type the / it will give you a new text box to type workflows (plural!), then another /, and finally, quarto-publish.yml.\nNow you‚Äôll have an empty new file. Paste the following in this empty file - you can click on the top-right of this box to copy all the code inside this code box:\non:\n  push:\n    branches: main\n\nname: Render and Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v2 \n        \n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          tinytex: true \n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n      \n      # add software dependencies here\n\n      - name: Publish to GitHub Pages (and render)\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # this secret is always available for github actions\nCommit this to save your new quarto-publish.yml file. This is your GitHub Action.\nFinally, from your main repo page, click Settings &gt; Actions &gt; General. Under ‚ÄòWorkflow permissions‚Äô, select ‚ÄòRead and write permissions‚Äô. Save.\nNext, we‚Äôll create a new gh-pages branch. Go back to the main view of your GitHub repository. On the far left from the green ‚ÄúCode‚Äù button, click the button that says ‚Äúmain‚Äù. In the pull-down menu, type gh-pages - all lowercase, with a hyphen. Click the bold text that says ‚ÄúCreate branch: gh-pages from main‚Äù.\nNow click on the Settings tab in the top right of your repository. On the left sidebar, click Pages. At the top of Pages under ‚ÄúSource‚Äù, select gh-pages root, and press Save (may already be saved by default).\nTo view your published website, at your main repository page, on the right side, click the gear-icon, select ‚ÄòUse your GitHub Pages website‚Äô."
  },
  {
    "objectID": "explore.html#confirm",
    "href": "explore.html#confirm",
    "title": "Explore and setup",
    "section": "Confirm your website is published",
    "text": "Confirm your website is published\nTo confirm that your website is published, go back to your main repository page. You‚Äôll now see an orange dot showing that the GitHub Action is beginning to publish the page.\n\n\n\nOur repo with orange dot indicating in-progress GitHub Action build\n\n\nIf you do not see this orange dot, you can re-run the GitHub Action (on the main repo page, click Actions &gt; select the workflow you want to re-run &gt; click the ‚ÄòRe-run all jobs‚Äô button.\nWhen your orange do becomes a green check, you can go inspect your published site at ‚Äúhttps://username.github.io/your-repo). For example: https://openscapes.github.io/quarto-website-tutorial.\n\n\n\nOur repo with green check indicating successful GitHub Action build\n\n\nIt can take some time for the site to deploy, so don‚Äôt worry if you don‚Äôt see it right away."
  },
  {
    "objectID": "explore.html#renaming-your-repo",
    "href": "explore.html#renaming-your-repo",
    "title": "Explore and setup",
    "section": "Renaming your repo",
    "text": "Renaming your repo\nIf you‚Äôd like to rename your repo, go to Settings and the option to rename is on the top of the main settings page."
  },
  {
    "objectID": "explore.html#onward",
    "href": "explore.html#onward",
    "title": "Explore and setup",
    "section": "Onward!",
    "text": "Onward!\nNow you are ready to start editing and publishing! The next chapter describes how starting off from the browser, using Markdown."
  },
  {
    "objectID": "quarto-workflows/browser.html",
    "href": "quarto-workflows/browser.html",
    "title": "From the Browser",
    "section": "",
    "text": "A workflow from the browser if good for getting started (since you do not need to install additional software) and for making small contributions, but is definitely limited. Once you feel comfortable here, you can move to a different setup.\nHere‚Äôs an example of editing content on an existing page."
  },
  {
    "objectID": "quarto-workflows/browser.html#edit-content-on-an-existing-page",
    "href": "quarto-workflows/browser.html#edit-content-on-an-existing-page",
    "title": "From the Browser",
    "section": "Edit content on an existing page",
    "text": "Edit content on an existing page\nLet‚Äôs change the date on the home page of this website.\nIn your repository, navigate to index.md. Then, click the pencil icon in the top right to edit directly.\n\n\n\n\n\nWe are now in the ‚ÄúEdit file‚Äù tab of the editor, where we can make modifications. Let‚Äôs change the date to today‚Äôs date. Click the ‚ÄúPreview‚Äù tab to see your changes. You can even check the ‚ÄúShow diff‚Äù box on the right side to see the changes you‚Äôve made.\n\n\n\n\n\nWhile you‚Äôre here, see if there are additional changes to the text you‚Äôd like to make. Maybe changing the title or author at the top, or for the main text on the home page of the website.\nOur index.md file is written in Markdown, which enables you to make simple text formatting. As you go back and forth from ‚ÄúEdit file‚Äù to ‚ÄúPreview‚Äù, notice the patterns of how the Markdown text looks when it is as source (‚ÄúEdit file‚Äù) and when it is formatted (‚ÄúPreview‚Äù). For example, in Markdown, you can make text as a header with # symbols, bold or italic with * symbols, and hyperlinks with [](). Notice that spacing is important: for example, there are carriage returns (when you hit the ‚Äúreturn‚Äù key) before any bullet points. You can learn the short list of Markdown rules here: https://quarto.org/docs/authoring/markdown-basics."
  },
  {
    "objectID": "quarto-workflows/browser.html#commit-and-publish",
    "href": "quarto-workflows/browser.html#commit-and-publish",
    "title": "From the Browser",
    "section": "Commit and publish",
    "text": "Commit and publish\nCommit your changes by scrolling to the bottom of the page and writing a commit message - a note to yourself and others about what changes you made. Write your commit message and then click the green ‚ÄúCommit changes‚Äù button.\n\n\n\n\n\nNow, click back to the main page of your GitHub repository. You should see the orange dot confirming your website is published. You‚Äôll have to wait for the GitHub Action to tell quarto to build your site for you to see the update, but it will be there!"
  },
  {
    "objectID": "quarto-workflows/browser.html#limitations",
    "href": "quarto-workflows/browser.html#limitations",
    "title": "From the Browser",
    "section": "Limitations",
    "text": "Limitations\nWhile awesome that we can edit using GitHub directly from the browser, there are obvious limitations. One is that to see your edits show up in your book, you have to publish using the GitHub Action. This is slow. Another limitation is that we can only work on one file at a time and commit them each separately, which also is slow. Using additional software can make things much better, as we explore in subsequent chapters."
  },
  {
    "objectID": "quarto-workflows/jupyter.html",
    "href": "quarto-workflows/jupyter.html",
    "title": "From Jupyter",
    "section": "",
    "text": "You can interact with Quarto through JupyterLab or JupyterHub. Your Jupyter setup will involve .ipynb notebooks and the command line. Quarto‚Äôs JupyterLab tutorials has great instructions on getting started with JupyterLab, including computations and authoring.\nHere we will demonstrate how to work with this Quarto tutorial site in JupyterHub and add a Jupyter Notebook (.ipynb file). This example uses the NASA-Openscapes JupyterHub that already has all python environments as well as Quarto installed."
  },
  {
    "objectID": "quarto-workflows/jupyter.html#setup",
    "href": "quarto-workflows/jupyter.html#setup",
    "title": "From Jupyter",
    "section": "Setup",
    "text": "Setup\n\nJupyterHub\nOur JupyterHub is already setup with python environments as well as Quarto (through nasa-openscapes/corn), so there is no further installation required.\n\n\nClone your repo\nYou‚Äôll start by cloning your repository into JupyterHub. Do this by opening a terminal (File &gt; New &gt; Terminal). In the Terminal, git clone your repository and cd into it:\ngit clone https://github.com/openscapes/quarto-website-tutorial\ncd quarto-website-tutorial\n\n\nInstall Quarto\nNot needed - Quarto is already installed on the NASA-Openscapes JupyterHub! But to install elsewhere you would do so from https://quarto.org/docs/get-started/.\nQuarto is a Command Line Interface (CLI), like git. Once download is complete, follow the installation prompts on your computer like you do for other software. You won‚Äôt see an application to click on when it is installed.\nNote for Mac users: If you do not have administrative privileges, please select ‚ÄúInstall for me only‚Äù during the Destination Selection installation step (you will first click on ‚ÄúChange Install Location‚Äù at the Installation Type step).\nYou can check to confirm that Quarto is installed properly from the command line:\nquarto check install\n\n\n\n\n\n\nAdditional checks\n\n\n\n\n\nYou can also run:\n\nquarto check knitr to locate R, verify we have the rmarkdown package, and do a basic render\nquarto check jupyter to locate Python, verify we have Jupyter, and do a basic render\nquarto check to run all of these checks together\n\n\n\n\n\n\n\n\n\n\nHistorical aside: Install Quarto in a docker container\n\n\n\n\n\nIn Summer 2021 some NASA Mentors trying to install quarto locally was not an option, but they were able to install it inside a container using the following Dockerfile:\n#| fold: true\n#| summary: \"Show the Dockerfile\"\n\n##############################\n# This Dockerfile installs quarto and then runs quarto serve against the\n# internal /home/quarto/to_serve.\n#\n# BUILD\n# -----\n# To build this container, run\n#\n#     docker build -t quarto_serve .\n#\n# Add the --no-cache option to force docker to build fresh and get the most\n# recent version of quarto.\n#\n#\n# RUN\n# ---\n# 1. Find the directory you want quarto to serve. Let's call this /PATH/TO/earthdata-cloud-cookbook.\n# 2. Run docker:\n#\n#     docker run --rm -it -p 4848:4848 -v /PATH/TO/earthdata-cloud-cookbook:/home/quarto/to_serve quarto_serve\n#\n# 3. Open your browser and go to http://127.0.0.1:4848/\n#\n##############################\n\nFROM ubuntu:hirsute\n\n######\n# Install some command line tools we'll need\n######\nRUN apt-get update\nRUN apt-get -y install wget\nRUN apt-get -y install gdebi-core\nRUN apt-get -y install git\n\n\n######\n# Install quarto (https://quarto.org/)\n######\n\n# This is a quick and dirty way of getting the newest version number from\n# https://github.com/quarto-dev/quarto-cli/releases/latest. What's happening is\n# we're pulling the version number out of the redirect URL. This will end up\n# with QVER set to something like 0.2.11.\nRUN QVER=`wget --max-redirect 0 https://github.com/quarto-dev/quarto-cli/releases/latest 2&gt;&1 | grep \"Location\" | sed 's/L.*tag\\/v//' | sed 's/ .*//'` \\\n    && wget -O quarto.deb \"https://github.com/quarto-dev/quarto-cli/releases/download/v$QVER/quarto-$QVER-amd64.deb\"\nRUN gdebi -n quarto.deb\n\n# Run this to make sure quarto installed correctly\nRUN quarto check install\n\n\n######\n# Create a non-root user called quarto\n######\nRUN useradd -ms /bin/bash quarto\nUSER quarto\nRUN mkdir /home/quarto/to_serve\nWORKDIR /home/quarto/to_serve\n\n\n######\n# Start quarto serve\n######\n\nCMD quarto serve --no-browse --host 0.0.0.0 --port 4848"
  },
  {
    "objectID": "quarto-workflows/jupyter.html#quarto-preview",
    "href": "quarto-workflows/jupyter.html#quarto-preview",
    "title": "From Jupyter",
    "section": "Quarto preview",
    "text": "Quarto preview\nLet‚Äôs start off by previewing our quarto site locally. In Terminal, type quarto preview, which will provide a URL with a preview of our site!\nquarto preview\n# Preparing to preview\n# Watching files for changes\n# Browse at https://openscapes.2i2c.cloud/user/jules32/proxy/4593/\nCopy this URL into another browser window; and arrange them so you can see them both. I make a bit more space in Jupyter by collapsing the left file menu by clicking on the file icon at the top of the left sidebar.\n\n\n\n\n\n\nMake a small change and preview it\nNow we‚Äôll be able to see live changes in the preview as we edit in our .md files. Let‚Äôs try it: Change the date in index.md by opening it from the file directory. Change to today‚Äôs date, and save. Your preview window will refresh automatically! If it does not, you can also refresh the page manually. The refreshed previewed site will now display your changes!"
  },
  {
    "objectID": "quarto-workflows/jupyter.html#create-a-new-.ipynb-page",
    "href": "quarto-workflows/jupyter.html#create-a-new-.ipynb-page",
    "title": "From Jupyter",
    "section": "Create a new .ipynb page",
    "text": "Create a new .ipynb page\nLet‚Äôs add a new page to our site. Instead of an .md file like the others, let‚Äôs add a .ipynb file.\nFile &gt; New &gt; Notebook. Accept the default kernel by clicking Select.\n\nFirst chunk: raw yaml\nBy default, this Notebook will give us a first chunk that is code. Let‚Äôs change it to raw so that we can write our yaml at the top.\n\n\n\n\n\nIn our Raw code chunk, let‚Äôs write the title of this document. We need three dashes --- on separate lines preceding and following the title:, which you can name as you‚Äôd like.\n---\ntitle: Python Example\n---\n\n\nSecond chunk: Markdown\nLet‚Äôs add a new chunk that is Markdown so we can write some description of what this page will be.\nClick the + symbol at the top of the document, and this will add a new chunk, which by default again is a Code chunk. Change it to a Markdown Chunk following the steps we did above when switching to Raw.\nHere, write a little bit of text in Markdown. Since your title is effectively a level-1 header, avoid using level-1 headers in the rest of your document. Here is some example text I wrote:\n## Introduction\n\nThis example has some Python code that will be a part of our Quarto site.\n\n\nThird chunk: Code\nNow let‚Äôs create a new chunk with the default Code setting.\nPaste the following code (or write some of your own to test):\n#| label: fig-polar\n#| fig-cap: \"A line plot on a polar axis\"\nimport numpy as np\nimport matplotlib.pyplot as plt\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\nNow, go ahead and execute this code chunk like you normally would, by clicking the cursor in a code block and clicking the sideways ‚Äúplay‚Äù triangle to run the selected cells (and advance to the next cell). This code produces a plot.\nNote that the code runs as it normally would; the code options in the comments are just comments.\n\n\nSave your file\nSave your document - I‚Äôll call mine python-example.ipynb in the main repository."
  },
  {
    "objectID": "quarto-workflows/jupyter.html#update-_quarto.yml",
    "href": "quarto-workflows/jupyter.html#update-_quarto.yml",
    "title": "From Jupyter",
    "section": "Update _quarto.yml",
    "text": "Update _quarto.yml\nNow we‚Äôll add python-example.ipynb to our _quarto.yml file; this is where we register of all files to include in our site. Let‚Äôs add it after the section called ‚ÄúBasic Workflows‚Äù.\nOpen _quarto.yml by clicking on it from the file directory.\nScroll down to review the current contents in the sidebar: section. It‚Äôs there we see all the file arrangement that we see in the previewed site.\nAdd - python-example.ipynb to line 46, making sure that your indentation aligns with the other pages.\n\n\n\n\n\nYou‚Äôll see that our new page shows up in our Preview, and the code is executed since we did that in the Jupyter Notebook itself. By default, Quarto will not execute code chunks since your computations will likely become more complex and you will want to control when they are executed (or ‚Äúrun‚Äù).\nSince Quarto is still previewing our website and the python-example.ipynb, the plot also displays in the notebook after the code is run and the file is saved, as shown below.\n\n\n\n\n\nSo, your normal workflow for creating and running code blocks in your Jupyter Notebook is the same one you‚Äôll use as Quarto displays the preview."
  },
  {
    "objectID": "quarto-workflows/jupyter.html#quarto-render",
    "href": "quarto-workflows/jupyter.html#quarto-render",
    "title": "From Jupyter",
    "section": "Quarto render",
    "text": "Quarto render\nSo far we have used Quarto preview to view our website as we develop it. Quarto render will build the html elements of the website that we can see when we preview. Rendering will format the markdown text and code nicely as a website (or however is indicated in the _quarto.yml).\nBy default, Quarto render does not execute code in a Jupyter notebook. It will never run .ipynb files unless you tell it to.\n\nRender whole notebook\nIf you would like it to specifically execute code in a Jupyter notebook, you can do so in Terminal.\nOur Terminal is still busy previewing our website, so let‚Äôs open a new Terminal.\nFile &gt; New &gt; Terminal. Then type:\ncd quarto-website-tutorial\nquarto render python-example.ipynb --execute"
  },
  {
    "objectID": "quarto-workflows/jupyter.html#authoring-tips",
    "href": "quarto-workflows/jupyter.html#authoring-tips",
    "title": "From Jupyter",
    "section": "Authoring tips",
    "text": "Authoring tips\nQuarto.org has details about authoring, including specific instructions about authoring in Jupyter: quarto.org/docs/reference/cells/cells-jupyter."
  },
  {
    "objectID": "quarto-workflows/jupyter.html#commit-and-push",
    "href": "quarto-workflows/jupyter.html#commit-and-push",
    "title": "From Jupyter",
    "section": "Commit and push!",
    "text": "Commit and push!\nCommitting and pushing will make the changes you see locally live on your website (using the GitHub Action we set up earlier)."
  },
  {
    "objectID": "quarto-workflows/jupyter.html#troubleshooting",
    "href": "quarto-workflows/jupyter.html#troubleshooting",
    "title": "From Jupyter",
    "section": "Troubleshooting",
    "text": "Troubleshooting\n\nMy changes don‚Äôt show up in preview\nMake sure you‚Äôve saved your file! There might be a slight delay depending on your JupyterHub/Lab setup.\n\n\nQuarto render hangs / does not complete\nCheck the specific notebook, are there any `‚Äî` throughout to denote line breaks rather than yaml? They might be causing the issue; consider deleting those.\nAlso check how long the first raw cell is. Are there level-1 headers (#)? Try removing them."
  },
  {
    "objectID": "quarto-workflows/index.html",
    "href": "quarto-workflows/index.html",
    "title": "Quarto workflows",
    "section": "",
    "text": "How do you work in Quarto? You can use whichever tool you‚Äôre comfortable with (RStudio, Jupyter, GitHub, VS Code, etc). Developing your quarto site will have the same basic workflow, no matter which tool you use. It is very iterative, and each is explored more below.\n\nAuthoring: write text, code, images, etc in a file. Supported files include .md, .Rmd, .qmd, .ipynb‚Ä¶\nUpdate _quarto.yml as needed (for example, if you‚Äôve created a new file you‚Äôd like included in your site)\nRender individual files and/or the whole website\nRepeat, repeat, repeat\nCommit and push your website to GitHub, your updates will publish automatically!\nRepeat all of the above to make the website as you‚Äôd like!\n\nNote: if editing from your internet browser we won‚Äôt render in Step 3. That step will not be separate, but combined with Step 5, which will only require a commit, not a push."
  },
  {
    "objectID": "quarto-workflows/index.html#authoring",
    "href": "quarto-workflows/index.html#authoring",
    "title": "Quarto workflows",
    "section": "Authoring",
    "text": "Authoring\nAs an author, you have a lot of options of how your text will be formatted, arranged, and interlinked. You will be writing in Markdown, which is a lightweight text formatting language. The Quarto documentation about authoring introduces markdown-basics that will get you started. Also see Mine √áetinkaya-Rundel‚Äôs A Quarto tip a day.\nEach page of our site has a similar first few lines - this YAML, like we saw in our _quarto.yml and it is indicated by two sets of 3 dashes --- :\n---\ntitle: My title\n---\nYou‚Äôre able to add more features to individual pages by including it in the YAML, which for the most part here only includes a title. See Quarto excecution options for more information of what you can include in the YAML."
  },
  {
    "objectID": "quarto-workflows/index.html#update-_quarto.yml",
    "href": "quarto-workflows/index.html#update-_quarto.yml",
    "title": "Quarto workflows",
    "section": "Update _quarto.yml",
    "text": "Update _quarto.yml\nLet‚Äôs have a closer look at the _quarto.yml file.\nThis type of file (.yml or .yaml) is written in YAML (‚ÄúYet Another Markup Language‚Äù). You‚Äôll be able to shift the arrangement of webpages by reordering/adding/deleting them in the _quarto.yml file following the patterns you see in this example.\n\n\n\n_quarto.yml and website side-by-side\n\n\nNotice that there are multiple ways in the _quarto.yml for you to include a file in your website. For example, in the above image, the ‚ÄúFirst Observations‚Äù we see in the left sidebar of the published website (right image) is represented in _quarto.yml (left image) over two lines, with line 36 indicating the file reference and line 37 indicating the text to show up in the left sidebar. However, ‚ÄúFrom RStudio‚Äù is only represented in one line of _quarto.yml, on line 43. This represents two strategies for including a file in your website. By default, the title of a specified file will show up in the website‚Äôs sidebar, which is what is happening with the ‚ÄúFrom RStudio‚Äù example. If you would like more control over what is written in the sidebar vs the title of your files, then the approach we took with ‚ÄúFirst Observations‚Äù is what you‚Äôll want to do: you‚Äôll see that only ‚ÄúFirst Observations‚Äù shows up in the sidebar as we specified in _quarto.yml, but the page‚Äôs title says ‚ÄúFirst Observations & Setup‚Äù (which in our preference was too long for the sidebar).\n\n\n\n\n\n\nNote\n\n\n\nAs you modify _quarto.yml, the most important thing to know is that spacing matters. Pay attention to whether text is indented by one, two, four, or other spaces, and make sure you follow it; if your site is not looking as expected it is likely a silent error in your YAML. Some text editors like RStudio provide debugging support for YAML and are highly recommended to save you time and heartache."
  },
  {
    "objectID": "quarto-workflows/index.html#install-quarto",
    "href": "quarto-workflows/index.html#install-quarto",
    "title": "Quarto workflows",
    "section": "Install Quarto",
    "text": "Install Quarto\nhttps://quarto.org/docs/get-started/ describes how to install Quarto, which will depend on your operating system. We‚Äôll walk through installation for each tool in the next chapters."
  },
  {
    "objectID": "quarto-workflows/rstudio.html",
    "href": "quarto-workflows/rstudio.html",
    "title": "From RStudio",
    "section": "",
    "text": "The RStudio software (called an IDE, integrated development environment) is an excellent way to edit files and interface with GitHub. Plus, as it is made by the same folks who make Quarto, it has many integrated features for streamlining your workflow with Quarto, including how it previews your edits and provides debugging support for yaml! Quarto's RStudio tutorials has great instructions on getting started with RStudio, including computations and authoring.\nHere is what you‚Äôll need to do to set up and use RStudio with Quarto."
  },
  {
    "objectID": "quarto-workflows/rstudio.html#setup",
    "href": "quarto-workflows/rstudio.html#setup",
    "title": "From RStudio",
    "section": "Setup",
    "text": "Setup\n\nRStudio and GitHub\nFor a workflow with RStudio and GitHub on your local computer, you will need four things:\n\nR\nRStudio\nGit\nGitHub\n\nFollow the UCSB MEDS Installation Guide for detailed instructions on how to create accounts, download, install, and configure on Mac and Windows. This takes about 20 minutes. (For an even more detailed walk-through, see Allison Horst‚Äôs ESM 206 Google Doc).\n\n\nClone your repo\nYou‚Äôll start by cloning your repository into RStudio.\nFile &gt; New Project &gt; Version Control &gt; Git &gt; paste your repository name.\nR for Excel Users: Clone your repository using RStudio has detailed instructions and screenshots of these steps.\n\n\nInstall Quarto\nNext, you‚Äôll install Quarto: https://quarto.org/docs/get-started/. After downloading, follow the installation wizard on your computer. When it is complete, you won‚Äôt see an application or any new software, but it is now available to RStudio (as well as all other applications on your computer, including the command line).\n\n\nRStudio orientation\nNow let‚Äôs take a moment to get oriented. This is an RStudio project, which is indicated in the top-right. The bottom right pane shows all the files in your project; everything we‚Äôve cloned from GitHub. We can open any RStudio project by opening its .Rproj file, or from RStudio File &gt; Open Project ‚Ä¶.\n\n\n\nRStudio IDE highlighting the project name and files pane\n\n\n\n\nVisual Editor\nThe RStudio Visual Editor is quite new and has features that improve your writing experience. Working in the Visual Editor feels a bit like working in a Google Doc.\nHere‚Äôs an example showing the same file in the original Source Editor with content in markdown format and in the Visual Editor with content that looks more like it will appear in a live site. You can switch freely between these modes.\n\n\n\n\n\n\n\n\n\nRStudio IDE highlighting the Source Editor\n\n\n\n\n\n\n\nRStudio IDE highlighting the Visual Editor\n\n\n\n\n\nAlready have some content formatted in a Google Doc? You can copy-paste it into the Visual Editor and most formatting will be retained.\nThe editing bar provides familiar point and click access to text formatting options like bulleted or numbered lists.\n\n\n\nRStudio IDE highlighting the point and click editing bar\n\n\n\nKeyboard shortcuts\nThe Visual Editor also lets you use many keyboard shortcuts that might be familiar for adding boldface (command-b), italics (command-i), or headers. On a Mac, option-command-2 will make a level 2 header. Try it with option-command-1, or option-command-0 for normal text!\n\n\nInsert an image or figure\nTo insert an image (called a figure in Quarto), click the image icon. This brings up a window in which we can select the image, set its alignment, give it a caption and alt text, hyperlink it, or edit other metadata.\n\n\n\nInsert image or figure using the Visual Editor\n\n\nOnce an image is added, clicking on that image gives us editing options. We can resize it dynamically by clicking in the image and dragging a corner or side to resize. When an image is selected, its dimensions are displayed for editing. Clicking on the gray ellipsis to the right of the dimensions opens the pop-up window to access more metadata edits.\n\n\nInsert a table\nSimilar to adding an image, to insert a table, we click the Table dropdown."
  },
  {
    "objectID": "quarto-workflows/rstudio.html#quarto-render",
    "href": "quarto-workflows/rstudio.html#quarto-render",
    "title": "From RStudio",
    "section": "Quarto render",
    "text": "Quarto render\nIn the Build tab in the top-right pane, click ‚ÄúRender Website‚Äù. This will build the .html files and preview your website. It‚Äôs equivalent to ‚Äúknitting‚Äù in RMarkdown.\nNote that you can also click ‚ÄúPreview Website‚Äù. With ‚ÄúRender Website‚Äù in RStudio, Quarto is able to render and preview in one step.\nIf you‚Äôd ever like to stop the preview, in the bottom-left, click on the Jobs tab and then the red Stop button.\n\nMake a small change and render it\nClick on index.md. This will open this markdown file in a fourth pane; the editor pane. Make a small change, for example change to today‚Äôs date on Line 4. Then, save your file; there is a disc icon at the top of the file.\nThen, render this file: press ‚ÄúRender‚Äù which is to the right of the disc icon that saves the file. This will render only this single file, as opposed to rerendering the whole website like when we clicked ‚ÄúRender Website‚Äù in the top right pane. Checking Render on Save (between the disc icon and the Render button) is a great strategy for doing this in one step."
  },
  {
    "objectID": "quarto-workflows/rstudio.html#create-a-new-.rmd-page",
    "href": "quarto-workflows/rstudio.html#create-a-new-.rmd-page",
    "title": "From RStudio",
    "section": "Create a new .Rmd page",
    "text": "Create a new .Rmd page\nNew &gt; RMarkdown document &gt; OK\nThe starter RMarkdown document has some R code inside: it displays a summary of the cars dataset that is pre-loaded into R (summary(cars)) and plots the pressure data that is also pre-loaded (plot(pressure)).\nSave this document as r-example.rmd."
  },
  {
    "objectID": "quarto-workflows/rstudio.html#update-_quarto.yml",
    "href": "quarto-workflows/rstudio.html#update-_quarto.yml",
    "title": "From RStudio",
    "section": "Update _quarto.yml",
    "text": "Update _quarto.yml\nNow we‚Äôll add r-example.rmd to our _quarto.yml file; this is where we register all files to include in our site. Let‚Äôs add it after the section called ‚ÄúQuarto Workflows‚Äù.\nOpen _quarto.yml by clicking on it from the file directory.\nScroll down to review the current contents in the sidebar: section under contents:. It‚Äôs there we see all the file arrangement that we see in the previewed site.\nAdd - r-example.rmd in its own line, making sure that your indentation aligns with the other pages.\nFrom the Build tab, clicking Preview Website will recreate your website!"
  },
  {
    "objectID": "quarto-workflows/rstudio.html#authoring-tips",
    "href": "quarto-workflows/rstudio.html#authoring-tips",
    "title": "From RStudio",
    "section": "Authoring tips",
    "text": "Authoring tips\nChecking ‚ÄúRender on Save‚Äù is really helpful when iterating quickly on a document.\nIf the document is very code-heavy, consider using freeze that will not run the code each time.\nQuarto.org has details about authoring, including specific instructions about authoring in RStudio."
  },
  {
    "objectID": "quarto-workflows/rstudio.html#commit-and-push",
    "href": "quarto-workflows/rstudio.html#commit-and-push",
    "title": "From RStudio",
    "section": "Commit and push!",
    "text": "Commit and push!\nCommitting and pushing will make the changes you see locally live on your website (using the GitHub Action we set up earlier)."
  },
  {
    "objectID": "quarto-workflows/rstudio.html#troubleshooting",
    "href": "quarto-workflows/rstudio.html#troubleshooting",
    "title": "From RStudio",
    "section": "Troubleshooting",
    "text": "Troubleshooting\nIf you have trouble rendering your website after for example changing the extenstion of a file from .md to .qmd, refreshing your RStudio often helps. Do this by clicking the project name at the upper right of the RStudio window (in this case, quarto-website-tutorial), and underneath the ‚Äúclose project‚Äù section, click the same name of your project: quarto-website-tutorial. This will relaunch your whole project afresh."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Communicating Research Effectively with R",
    "section": "Welcome",
    "text": "Welcome\nWelcome to ‚ÄúCommunicating Research Effectively with R!!‚Äù. This workshop is part of the IAPSMCON 2024 pre-conference workshops at KMC, Mangalore.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "learning-more.html#learn-more",
    "href": "learning-more.html#learn-more",
    "title": "Learning more",
    "section": "",
    "text": "An excellent overview: Reproducible authoring with Quarto - Mine √áetinkaya-Rundel, Feb 2022 - slides, youtube\nA Quarto tip a day in June 2022, from Mine √áetinkaya-Rundel.\n\n\n\nOpenscapes Champions Lessons Series\nOpenscapes Approach Guide\n\nNASA Earthdata Cloud Cookbook\n\nSee many more examples at the quarto gallery!\n\n\n\nAre you making onboarding documentation? Check out The Fay Lab Manual (now in Quarto!) for inspiration on structure - you could also start there and make it your own."
  },
  {
    "objectID": "quarto-workflows/index.html#basic-workflow",
    "href": "quarto-workflows/index.html#basic-workflow",
    "title": "Quarto workflows",
    "section": "",
    "text": "How do you work in Quarto? You can use whichever tool you‚Äôre comfortable with (RStudio, Jupyter, GitHub, VS Code, etc). Developing your quarto site will have the same basic workflow, no matter which tool you use. It is very iterative, and each is explored more below.\n\nAuthoring: write text, code, images, etc in a file. Supported files include .md, .Rmd, .qmd, .ipynb‚Ä¶\nUpdate _quarto.yml as needed (for example, if you‚Äôve created a new file you‚Äôd like included in your site)\nRender individual files and/or the whole website\nRepeat, repeat, repeat\nCommit and push your website to GitHub, your updates will publish automatically!\nRepeat all of the above to make the website as you‚Äôd like!\n\nNote: if editing from your internet browser we won‚Äôt render in Step 3. That step will not be separate, but combined with Step 5, which will only require a commit, not a push."
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "Communicating Research Effectively with R",
    "section": "Overview",
    "text": "Overview\n\nWhy this workshop?\n\nEffective communication of research findings has become an essential skill for the next generation of public health professionals, encompassing postgraduate students, senior residents, and faculty members. Recognizing this need, this workshop aims to foster the development of skilled health professionals proficient in the novel techniques and methodologies utilized in research communication.\nTailored to a diverse audience of postgraduate students, senior residents, and faculty members, the workshop equips participants with valuable skills in organizing the academic writing process, be it a journal article, thesis manuscript or an informal blog for a website.\nThrough the workshop, participants will learn to create well-organized manuscripts and deliver across complex ideas through impactful data representations, and convey their research outcomes effectively.\n\n\n\nObjectives\n\nTo develop core competencies and skills in research communication among next-generation public health professionals, through the principles of reproducible research and providing hands-on experience with case studies and group activities.\n\n\n\nPrerequisites\n\nEssential:\n\nParticipants must bring their own laptops.\nIt is mandatory that the laptop be in good working condition.\nPreferably with 16GB RAM.\n\n\n\nDesirable:\n\nThorough understanding of core concepts in epidemiology and biostatistics.\n\n\n\n\nSchedule\n\n\n\n\n\n\n\n\n\nWoskshop Schedule\n\n\nCommunicating Research Effectively with R\nIAPSMCON 2024 @ KMC, Mangalore\n\n\nTime\nSession\n\n\n\n\n09:00 - 10:00\nIntroduction and IceBreaker\n\n\n10:00 - 11:30\nFoundations\n\n\n11:30 - 12:15\nCreating your first document\n\n\n12:15 - 13:00\nCreating your first article\n\n\n13:00 - 14:00\nLunch\n\n\n14:00 - 15:00\nCreating your first book\n\n\n15:00 - 15:30\nGroup Activity and Presentations\n\n\n16:00 - 16:30\nGoing Beyond..\n\n\n16:30 - 17:00\nQ&A and Feedback Session\n\n\n\n\n\n\n\n\n\nInstructors\n\n\n\nResource Faculty\n\nProf.¬†Biju Soman\nDr.¬†Arun Mitra\nDr.¬†Gurpreet Singh\n\n\n\n\nFacilitators\n\nDr.¬†Adrija Roy\nDr.¬†Manikanda Nesan\nDr.¬†Antony Paul",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Communicate Research Effectively with R",
    "section": "",
    "text": "Woskshop Schedule\n\n\nCommunicating Research Effectively with R\nIAPSMCON 2024 @ KMC, Mangalore\n\n\nTime\nSession\n\n\n\n\n09:00 - 10:00\nIntroduction and IceBreaker\n\n\n10:00 - 11:30\nFoundations\n\n\n11:30 - 12:15\nCreating your first document\n\n\n12:15 - 13:00\nCreating your first article\n\n\n13:00 - 14:00\nLunch\n\n\n14:00 - 15:00\nCreating your first book\n\n\n15:00 - 15:30\nGroup Activity and Presentations\n\n\n16:00 - 16:30\nGoing Beyond..\n\n\n16:30 - 17:00\nQ&A and Feedback Session"
  },
  {
    "objectID": "overview.html",
    "href": "overview.html",
    "title": "Communicate Research Effectively with R",
    "section": "",
    "text": "Why this workshop?\n\nEffective communication of research findings has become an essential skill for the next generation of public health professionals, encompassing postgraduate students, senior residents, and faculty members. Recognizing this need, this workshop aims to foster the development of skilled health professionals proficient in the novel techniques and methodologies utilized in research communication.\nTailored to a diverse audience of postgraduate students, senior residents, and faculty members, the workshop equips participants with valuable skills in organizing the academic writing process, be it a journal article, thesis manuscript or an informal blog for a website.\nThrough the workshop, participants will learn to create well-organized manuscripts and deliver across complex ideas through impactful data representations, and convey their research outcomes effectively.\n\n\n\nObjectives\n\nTo develop core competencies and skills in research communication among next-generation public health professionals, through the principles of reproducible research and providing hands-on experience with case studies and group activities.\n\n\n\nPrerequisites\n\nEssential:\n\nParticipants must bring their own laptops.\nIt is mandatory that the laptop be in good working condition.\nPreferably with 16GB RAM.\n\n\n\nDesirable:\n\nThorough understanding of core concepts in epidemiology and biostatistics.\n\n\n\n\nSchedule\n\n\n\n\n\n\n\n\n\nWoskshop Schedule\n\n\nCommunicating Research Effectively with R\nIAPSMCON 2024 @ KMC, Mangalore\n\n\nTime\nSession\n\n\n\n\n09:00 - 10:00\nIntroduction and IceBreaker\n\n\n10:00 - 11:30\nFoundations\n\n\n11:30 - 12:15\nCreating your first document\n\n\n12:15 - 13:00\nCreating your first article\n\n\n13:00 - 14:00\nLunch\n\n\n14:00 - 15:00\nCreating your first book\n\n\n15:00 - 15:30\nGroup Activity and Presentations\n\n\n16:00 - 16:30\nGoing Beyond..\n\n\n16:30 - 17:00\nQ&A and Feedback Session\n\n\n\n\n\n\n\n\n\nInstructors\n\n\n\nResource Faculty\n\nProf.¬†Biju Soman\nDr.¬†Arun Mitra\nDr.¬†Gurpreet Singh\n\n\n\n\nFacilitators\n\nDr.¬†Adrija Roy\nDr.¬†Manikanda Nesan\nDr.¬†Antony Paul"
  },
  {
    "objectID": "foundations/index.html",
    "href": "foundations/index.html",
    "title": "Foundations",
    "section": "",
    "text": "This section deals with the foundational concepts necessary for the workshop.\nThey are as follows:\n\nPrinciples of Reproducible Research\nIntroduction to R and Rstudio\nIntroduction to Quarto",
    "crumbs": [
      "Foundations"
    ]
  },
  {
    "objectID": "foundations/chap_rep_research.html",
    "href": "foundations/chap_rep_research.html",
    "title": "Communicate Research Effectively with R",
    "section": "",
    "text": "Research is considered to be reproducible when the exact results can be reproduced if given access to the original data, software, or code.\n\nThe same results should be obtained under the same conditions\nIt should be possible to recreate the same conditions\n\n\n\n\nReproducibility refers to the ability of a researcher to duplicate the results of a prior study using the same materials as were used by the original investigator. That is, a second researcher might use the same raw data to build the same analysis files and implement the same statistical analysis in an attempt to yield the same results. Reproducibility is a minimum necessary condition for a finding to be believable and informative.\n\n\n\n‚Äî U.S. National Science Foundation (NSF) subcommittee on Replicability in Science\n\n\n\nThere are four key elements of reproducible research:\n\ndata documentation\ndata publication\ncode publication\noutput publication",
    "crumbs": [
      "Foundations",
      "Principles of Reproducible Research"
    ]
  },
  {
    "objectID": "foundations/chap_rep_research.html#principles-of-reproducible-research",
    "href": "foundations/chap_rep_research.html#principles-of-reproducible-research",
    "title": "Communicate Research Effectively with R",
    "section": "",
    "text": "Research is considered to be reproducible when the exact results can be reproduced if given access to the original data, software, or code.\n\nThe same results should be obtained under the same conditions\nIt should be possible to recreate the same conditions\n\n\n\n\nReproducibility refers to the ability of a researcher to duplicate the results of a prior study using the same materials as were used by the original investigator. That is, a second researcher might use the same raw data to build the same analysis files and implement the same statistical analysis in an attempt to yield the same results. Reproducibility is a minimum necessary condition for a finding to be believable and informative.\n\n\n\n‚Äî U.S. National Science Foundation (NSF) subcommittee on Replicability in Science\n\n\n\nThere are four key elements of reproducible research:\n\ndata documentation\ndata publication\ncode publication\noutput publication",
    "crumbs": [
      "Foundations",
      "Principles of Reproducible Research"
    ]
  },
  {
    "objectID": "foundations/chap_rep_research.html#reproducibility-crisis",
    "href": "foundations/chap_rep_research.html#reproducibility-crisis",
    "title": "Communicate Research Effectively with R",
    "section": "Reproducibility Crisis",
    "text": "Reproducibility Crisis\n\n\n\n\n\n\n\n\nFigure¬†1: Reproducibility Crisis in Science.  Baker, M. 1,500 scientists lift the lid on reproducibility. Nature 533, 452‚Äì454 (2016)\n\n\n\n\n\n\nFactors Contributing to the Reproducibility Crisis\n\nNot enough documentation on how experiment is conducted and data is generated\nData used to generate original results unavailable\nSoftware used to generate original results unavailable\nDifficult to recreate software environment (libraries, versions) used to generate original results\nDifficult to rerun the computational steps\n\nWhile reproducibility is the minimum requirement and can be solved with ‚Äúgood enough‚Äù computational practices, replicability/ robustness/ generalisability of scientific findings are an even greater concern involving research misconduct, questionable research practices (p-hacking, HARKing, cherry-picking), sloppy methods, and other conscious and unconscious biases.\n\n\n\n\n\n\n\n\nFigure¬†2: Cartoon by Sidney Harris (The New Yorker)\n\n\n\n\n\n\n\nWhat is the Reproducibility Spectrum\n\n\n\n\n\n\n\n\nFigure¬†3: Reproducibility spectrum for published research.  Peng, RD Reproducible Research in Computational Science Science (2011)",
    "crumbs": [
      "Foundations",
      "Principles of Reproducible Research"
    ]
  },
  {
    "objectID": "foundations/chap_intro_r.html",
    "href": "foundations/chap_intro_r.html",
    "title": "Communicate Research Effectively with R",
    "section": "",
    "text": "Open source (free!) statistical programming language/software\nIt can be used for:\n\nWorking with data - cleaning, wrangling and transforming\nConducting analyses including advanced statistical methods\nCreating high-quality tables & figures\nCommunicate research with R Markdown\n\nIt is constantly growing!\nHas a strong online support community\nSince it‚Äôs one programming language, it is versatile enough to take you from raw data to publishable research using free, reproducible code!\n\n\n\n\n\n\n\n\n\n\n\n\n\nRStudio is a free, open source IDE (integrated development environment) for R. (You must install R before you can install RStudio.) Its interface is organized so that the user can clearly view graphs, tables, R code, and output all at the same time. It also offers an Import-Wizard-like feature that allows users to import CSV, Excel, SPSS (*.sav), and Stata (*.dta) files into R without having to write the code to do so.\n\n\n\nExcel and SPSS are convenient for data entry, and for quickly manipulating rows and columns prior to statistical analysis. However, they are a poor choice for statistical analysis beyond the simplest descriptive statistics, or for more than a very few columns.\n\n\n\n\n\n\n\n\n\n\n\n\nFigure¬†1: Increasing use of R in scientific research\n\n\n\n\n\n\n\n\n\nR is becoming the ‚Äúlingua franca‚Äù of data science\nMost widely used and it is rising in popularity\nR is also the tool of choice for data scientists at Microsoft, Google, Facebook, Amazon\nR‚Äôs popularity in academia is important because that creates a pool of talent that feeds industry.\nLearning the ‚Äúskills of data science‚Äù is easiest in R\n\nSome of the reasons for chosing R over others are are:\n\nMissing values are handled inconsistently, and sometimes incorrectly.\nData organisation difficult.\nAnalyses can only be done on one column at a time.\nOutput is poorly organised.\nNo record of how an analysis was accomplished.\nSome advanced analyses are impossible\n\n\n\n\n\n\n\n\n\nFigure¬†2: Increasing use of R in scientific research\n\n\n\n\n\n\n\n\n\nIt is free and open-source\nIt is designed to make it easy to write and reuse code\nMakes it convenient to view and interact with the objects stored in your environment\nMakes it easy to set your working directory and access files on your computer\nIntegrates with collaboration and publishing tools\n\n\n\n\nThe ability to integrate code and narratives is a major advantage of Quarto and the RStudio environment, especially considering the scientific process is naturally incremental, and many projects start life as random notes, some code, then a manuscript, and eventually, everything ends up a bit mixed together.\nQuarto is a powerful tool that can‚Äôt be fully utilized unless your project documents, scripts and other files are well-organized. So, let‚Äôs take a look at RStudio‚Äôs features for managing projects and discuss some of the best practices when working with data.\n\n\nRStudio is the perfect tool for a reproducible research project. With a good project layout, you can make your life much easier:\n\nIt will help ensure the integrity of your data\nIt makes it simpler to share your code with someone else (a colleague, mentor, collaborator, etc.)\nIt allows you to upload your code with your manuscript submission easily.\nIt makes picking the project back up after a break easier.\nIt makes your research reproducible!\n\n\n\n\n\n\nCreate a project in RStudio.\n\n\n\n\n\n\n\nHint!\n\n\n\n\n\nYou can create a new project in RStudio: 1. Click the ‚ÄúFile‚Äù menu button, then ‚ÄúNew Project‚Äù. 2. Click ‚ÄúNew Directory‚Äù. 3. Click ‚ÄúNew Project‚Äù. 4. Type in the name of the directory to store your project, e.g.¬†my_first_project1. 5. Click the ‚ÄúCreate Project‚Äù button.\nNote that there are is a *.RProj file created in the project folder.\n\n\n\n\nOpen an RStudio project through the file system\n\n\n\n\n\n\n\nHint!\n\n\n\n\n\n\nExit RStudio.\nNavigate to the directory where you created the project.\nDouble click on the .Rproj file in that directory.",
    "crumbs": [
      "Foundations",
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "foundations/chap_intro_r.html#introduction-to-r-and-rstudio",
    "href": "foundations/chap_intro_r.html#introduction-to-r-and-rstudio",
    "title": "Communicate Research Effectively with R",
    "section": "",
    "text": "Open source (free!) statistical programming language/software\nIt can be used for:\n\nWorking with data - cleaning, wrangling and transforming\nConducting analyses including advanced statistical methods\nCreating high-quality tables & figures\nCommunicate research with R Markdown\n\nIt is constantly growing!\nHas a strong online support community\nSince it‚Äôs one programming language, it is versatile enough to take you from raw data to publishable research using free, reproducible code!\n\n\n\n\n\n\n\n\n\n\n\n\n\nRStudio is a free, open source IDE (integrated development environment) for R. (You must install R before you can install RStudio.) Its interface is organized so that the user can clearly view graphs, tables, R code, and output all at the same time. It also offers an Import-Wizard-like feature that allows users to import CSV, Excel, SPSS (*.sav), and Stata (*.dta) files into R without having to write the code to do so.\n\n\n\nExcel and SPSS are convenient for data entry, and for quickly manipulating rows and columns prior to statistical analysis. However, they are a poor choice for statistical analysis beyond the simplest descriptive statistics, or for more than a very few columns.\n\n\n\n\n\n\n\n\n\n\n\n\nFigure¬†1: Increasing use of R in scientific research\n\n\n\n\n\n\n\n\n\nR is becoming the ‚Äúlingua franca‚Äù of data science\nMost widely used and it is rising in popularity\nR is also the tool of choice for data scientists at Microsoft, Google, Facebook, Amazon\nR‚Äôs popularity in academia is important because that creates a pool of talent that feeds industry.\nLearning the ‚Äúskills of data science‚Äù is easiest in R\n\nSome of the reasons for chosing R over others are are:\n\nMissing values are handled inconsistently, and sometimes incorrectly.\nData organisation difficult.\nAnalyses can only be done on one column at a time.\nOutput is poorly organised.\nNo record of how an analysis was accomplished.\nSome advanced analyses are impossible\n\n\n\n\n\n\n\n\n\nFigure¬†2: Increasing use of R in scientific research\n\n\n\n\n\n\n\n\n\nIt is free and open-source\nIt is designed to make it easy to write and reuse code\nMakes it convenient to view and interact with the objects stored in your environment\nMakes it easy to set your working directory and access files on your computer\nIntegrates with collaboration and publishing tools\n\n\n\n\nThe ability to integrate code and narratives is a major advantage of Quarto and the RStudio environment, especially considering the scientific process is naturally incremental, and many projects start life as random notes, some code, then a manuscript, and eventually, everything ends up a bit mixed together.\nQuarto is a powerful tool that can‚Äôt be fully utilized unless your project documents, scripts and other files are well-organized. So, let‚Äôs take a look at RStudio‚Äôs features for managing projects and discuss some of the best practices when working with data.\n\n\nRStudio is the perfect tool for a reproducible research project. With a good project layout, you can make your life much easier:\n\nIt will help ensure the integrity of your data\nIt makes it simpler to share your code with someone else (a colleague, mentor, collaborator, etc.)\nIt allows you to upload your code with your manuscript submission easily.\nIt makes picking the project back up after a break easier.\nIt makes your research reproducible!\n\n\n\n\n\n\nCreate a project in RStudio.\n\n\n\n\n\n\n\nHint!\n\n\n\n\n\nYou can create a new project in RStudio: 1. Click the ‚ÄúFile‚Äù menu button, then ‚ÄúNew Project‚Äù. 2. Click ‚ÄúNew Directory‚Äù. 3. Click ‚ÄúNew Project‚Äù. 4. Type in the name of the directory to store your project, e.g.¬†my_first_project1. 5. Click the ‚ÄúCreate Project‚Äù button.\nNote that there are is a *.RProj file created in the project folder.\n\n\n\n\nOpen an RStudio project through the file system\n\n\n\n\n\n\n\nHint!\n\n\n\n\n\n\nExit RStudio.\nNavigate to the directory where you created the project.\nDouble click on the .Rproj file in that directory.",
    "crumbs": [
      "Foundations",
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "foundations/chap_intro_r.html#footnotes",
    "href": "foundations/chap_intro_r.html#footnotes",
    "title": "Communicate Research Effectively with R",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nKeep a note of the location of the directory on your computer.‚Ü©Ô∏é",
    "crumbs": [
      "Foundations",
      "Introduction to R and RStudio"
    ]
  },
  {
    "objectID": "foundations/chap_meet_quarto.html",
    "href": "foundations/chap_meet_quarto.html",
    "title": "Heading 1",
    "section": "",
    "text": "Quarto¬Æ is an open-source scientific and technical publishing system built on .\n\nIt is designed to be a complete scientific and technical publishing system.\nIt can create dynamic content with multiple languages R, Julia, Python, and Observable.\nIt allows you to author documents as plain text markdown or executable notebooks.\nYou can author with scientific markdown, including equations, citations, crossrefs, figure panels, callouts, advanced layout, and more.\nYou can publish high-quality research using a single framework, Quarto.\n\n\n\n\nQuarto provides a unified authoring framework for data science, combining your code, its results, and your prose. Quarto files are designed to be used in three ways:\n\nFor communicating to decision-makers, who want to focus on the conclusions and implications of your research and not the technicalities behind the analysis.\nFor collaborating with other researchers (including future you!).\nAs an environment in which to reproducible research where you can capture not only what you did, but also what you were thinking.\n\n\n\n\n\n\nYou can install Quarto from https://quarto.org/docs/download/.\n\n\n\n\n\n\n\n\nFigure¬†1: Installing Quarto\n\n\n\n\n\n\n\n\nTo get started, open RStudio and create a Quarto Document.\n\n\n\n\n\n\n\n\nFigure¬†2: Installing Quarto\n\n\n\n\n\nThis will create a file with temporary content to help get you started.\n\n\n\n\n\n\n\n\nFigure¬†3: The script editor is where you write and edit your content. You can view the content using the Source view, which uses the raw syntax (used throughout this tutorial), or use the Visual view, which uses a point-and-click interface for formatting (similar to Microsoft Word).\n\n\n\n\n\nAll of the scripts provided below in this tutorial should be entered into the ‚ÄòScript Editor‚Äô. Clicking Render will generate the formatted document. You can also highlight code and click Run to execute specific lines of code.\nThe console is where you see the output of any statistical code. The environment panel displays information about the variables and objects in your current R session, while the files panel allows you to navigate your computer‚Äôs file system and manage your R projects.\n\n\n\nEach quarto file starts with a set of code, called the YAML which is fenced within ---. The YAML specifics the metadata and document-wide settings.\nFor example, for a HTML document the YAML may be:\n---\ntitle: Introduction to Quarto\nsubtitle: My subtitle\nauthor: Arun Mitra\ndate: last-modified\nformat: \n  html:\n    self-contained: true\nexecute:\n  echo: true\n  warning: false\ntoc: true\nnumber-sections: true\n---\n\n\n\nformat specifies the type of output file to generate. Here it is an HTML file.\nself-contained: true specifies that the HTML file generated should be standalone file.\necho: true enables the printing of code (only output is displayed), unless otherwise specified.\nwarning: false disables the printing of warning messages.\ntoc: true specifies that the table of contents should be shown; automatically generated based on the headings.\nnumber-sections: specifies that the numbering of the sections should be shown.\n\n\n\n\n# Heading 1\n\n## Heading 2\n\n### Heading 3\n\nBold text like **this** or __this__\n\nItalicize text like *this* or _this_\n\nClickable link: &lt;https://google.com&gt;\n\n[Hyperlink](google.com) \n\n-   Bullet point (nordered lists)\n-   Hyphen, follwed by 'tab'\n\n1.    Ordered list\n2.    Number, period, then 'tab'\n\n|            | Manual   | Table    |\n|------------|----------|----------|\n| Variable 1 | 11       | 21       |\n| Variable 2 | 12       | 22       |\n| Variable 3 | 12       | 23       |\n\n\n\n\n\n\n\n\n\n\n\nBold text like this or this\nItalicize text like this or this\nClickable link: https://google.com\nHyperlink\n\nBullet point (nordered lists)\nHyphen, follwed by ‚Äòtab‚Äô\n\n\nOrdered list\nNumber, period, then ‚Äòtab‚Äô\n\n\n\n\n\nVar1\nVar2\n\n\n\n\nObservation 1\n11\n21\n\n\nObservation 2\n12\n22\n\n\nObservation 3\n12\n23\n\n\n\n\n\n\n\n\n\nQuarto can understand and run different programming languages, such as R and Python. This introduction focuses on R.\nCode is specified within ‚Äúcode chunks‚Äù, which begin with ```{r} and end with ```\nAs an example, here‚Äôs a simple calculation using R; the syntax is shown along with the output automatically generated.\n\n6 * 4\n\n[1] 24\n\n\nHere is one more example of creating a plot using an inbuilt dataset within R.\n\nmtcars |&gt; \n  plot()\n\n\n\n\n\n\n\n\n\n\n\nThere are a variety of options for how to handle the code and its output, called 'execution options'. These options are specified at the start of the code chunk, and begin with #|\nFor example, let us run the above code chunks with additional execution options:\n\n\n\n\n\n\n#| echo: true\n#| eval: false\n\n6 * 4\n\n\n\n\n\n6 * 4\n\n\n\n\n\n\nNote that the code has been printed, but not evaluated (the answer, has not been printed).\n\n\n\n\n\n\n\n#| echo: false\n#| eval: true\n\nmtcars |&gt; \n  plot()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdditionally you can use the option code-fold to hide the code chunk, and reveal only when needed.\n\n\n\n\n#| code-fold: true\n\n# Load Packages\nlibrary(ggstatsplot)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n\n# Load Data\npenguins &lt;- \n  data(penguins) |&gt; \n  get()\n\n# Remove missing values\npenguins &lt;- \n  penguins |&gt; \n  drop_na()\n\n# Create a plot\n\nggbetweenstats(\n    data = penguins,\n    x = species,\n    y = bill_length_mm )\n\n\n\n\n\n\nCode\n# Load Packages\nlibrary(ggstatsplot)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n\n# Load Data\npenguins &lt;- \n  data(penguins) |&gt; \n  get()\n\n# Remove missing values\npenguins &lt;- \n  penguins |&gt; \n  drop_na()\n\n# Create a plot\n\nggbetweenstats(\n    data = penguins,\n    x = species,\n    y = bill_length_mm )\n\n\n\n\n\n\n\n\nNote that the the output has been printed, however, if you want to see the code which produced this plot, you can click on the interactive Code button.\n\n\n\n\n\n\n\nAnother way to organize a report is to present information in different tabs.\nSimilarly, as before, this is coded using ::: to denote the start and end of the information to be presented in tabs.\nLevel 3 headings (specified using ###) are used as the tab title and denote the start of each new tab.\nHere a simple example:\n\n\n\n\n::: {.panel-tabset}\n\n### Panel 1\nContent of panel 1\n\n### Panel 2\n\n```{r}\nmtcars |&gt; \n  plot()\n```\n\n:::\n\n\n\n\n\nPanel 1Panel 2\n\n\nContent of panel 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo create and work with columns, use ::: or ::::. Like brackets, these are used to indicate the start and end the content to be placed in columns.\nHere‚Äôs an example of a Two Column Layout:\n\n\nContent of column 1:\n\nBullet point 1\nBullet point 1\nBullet point 1\n\n\nContent of column 2:\nThis can be an image as well:\n\n\n\n\n\n\n::: columns\n::: column\nContent of column 1:\n\n-   Bullet point 1\n-   Bullet point 1\n-   Bullet point 1\n:::\n\n::: column\nContent of column 2:\n\nThis can be an image as well:\n\n![](images/quarto_logo.png){width=\"50%\"}\n:::\n:::\n\n\n\nCallouts are used to draw extra attention to certain concepts, or to more clearly indicate that certain content is supplemental or applicable to only some scenarios.\nCallouts start with ::: {.callout-note}, then there‚Äôs the content, and it ends with :::.\nThere are five types of callouts:\n\n\n:::{.callout-note}\nThis is a callout block of the type \"note\".\n:::\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis is a callout block of the type ‚Äúnote‚Äù.\n\n\n\n\n\n:::{.callout-caution collapse=\"true\"}\nCallouts can be collapsible. \n:::\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\nCallouts can be collapsible.\n\n\n\n\n\n\n:::{.callout-important}\n# My heading\nThe first heading used within the callout \nis used as the callout heading.\n:::\n\n\n\n\n\n\n\n\nMy heading\n\n\n\nThe first heading used within the callout is used as the callout heading.\n\n\n\n\n\n:::{.callout-tip icon=false}\nThe icon can also be hidden, like this. \n:::\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe icon can also be hidden, like this.\n\n\n\n\n\n:::{.callout-caution}\nThis is a caution callout\n:::\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nThis is a caution callout",
    "crumbs": [
      "Foundations",
      "Meet Quarto!"
    ]
  },
  {
    "objectID": "foundations/chap_meet_quarto.html#meet-quarto",
    "href": "foundations/chap_meet_quarto.html#meet-quarto",
    "title": "Heading 1",
    "section": "",
    "text": "Quarto¬Æ is an open-source scientific and technical publishing system built on .\n\nIt is designed to be a complete scientific and technical publishing system.\nIt can create dynamic content with multiple languages R, Julia, Python, and Observable.\nIt allows you to author documents as plain text markdown or executable notebooks.\nYou can author with scientific markdown, including equations, citations, crossrefs, figure panels, callouts, advanced layout, and more.\nYou can publish high-quality research using a single framework, Quarto.\n\n\n\n\nQuarto provides a unified authoring framework for data science, combining your code, its results, and your prose. Quarto files are designed to be used in three ways:\n\nFor communicating to decision-makers, who want to focus on the conclusions and implications of your research and not the technicalities behind the analysis.\nFor collaborating with other researchers (including future you!).\nAs an environment in which to reproducible research where you can capture not only what you did, but also what you were thinking.\n\n\n\n\n\n\nYou can install Quarto from https://quarto.org/docs/download/.\n\n\n\n\n\n\n\n\nFigure¬†1: Installing Quarto\n\n\n\n\n\n\n\n\nTo get started, open RStudio and create a Quarto Document.\n\n\n\n\n\n\n\n\nFigure¬†2: Installing Quarto\n\n\n\n\n\nThis will create a file with temporary content to help get you started.\n\n\n\n\n\n\n\n\nFigure¬†3: The script editor is where you write and edit your content. You can view the content using the Source view, which uses the raw syntax (used throughout this tutorial), or use the Visual view, which uses a point-and-click interface for formatting (similar to Microsoft Word).\n\n\n\n\n\nAll of the scripts provided below in this tutorial should be entered into the ‚ÄòScript Editor‚Äô. Clicking Render will generate the formatted document. You can also highlight code and click Run to execute specific lines of code.\nThe console is where you see the output of any statistical code. The environment panel displays information about the variables and objects in your current R session, while the files panel allows you to navigate your computer‚Äôs file system and manage your R projects.\n\n\n\nEach quarto file starts with a set of code, called the YAML which is fenced within ---. The YAML specifics the metadata and document-wide settings.\nFor example, for a HTML document the YAML may be:\n---\ntitle: Introduction to Quarto\nsubtitle: My subtitle\nauthor: Arun Mitra\ndate: last-modified\nformat: \n  html:\n    self-contained: true\nexecute:\n  echo: true\n  warning: false\ntoc: true\nnumber-sections: true\n---\n\n\n\nformat specifies the type of output file to generate. Here it is an HTML file.\nself-contained: true specifies that the HTML file generated should be standalone file.\necho: true enables the printing of code (only output is displayed), unless otherwise specified.\nwarning: false disables the printing of warning messages.\ntoc: true specifies that the table of contents should be shown; automatically generated based on the headings.\nnumber-sections: specifies that the numbering of the sections should be shown.\n\n\n\n\n# Heading 1\n\n## Heading 2\n\n### Heading 3\n\nBold text like **this** or __this__\n\nItalicize text like *this* or _this_\n\nClickable link: &lt;https://google.com&gt;\n\n[Hyperlink](google.com) \n\n-   Bullet point (nordered lists)\n-   Hyphen, follwed by 'tab'\n\n1.    Ordered list\n2.    Number, period, then 'tab'\n\n|            | Manual   | Table    |\n|------------|----------|----------|\n| Variable 1 | 11       | 21       |\n| Variable 2 | 12       | 22       |\n| Variable 3 | 12       | 23       |\n\n\n\n\n\n\n\n\n\n\n\nBold text like this or this\nItalicize text like this or this\nClickable link: https://google.com\nHyperlink\n\nBullet point (nordered lists)\nHyphen, follwed by ‚Äòtab‚Äô\n\n\nOrdered list\nNumber, period, then ‚Äòtab‚Äô\n\n\n\n\n\nVar1\nVar2\n\n\n\n\nObservation 1\n11\n21\n\n\nObservation 2\n12\n22\n\n\nObservation 3\n12\n23\n\n\n\n\n\n\n\n\n\nQuarto can understand and run different programming languages, such as R and Python. This introduction focuses on R.\nCode is specified within ‚Äúcode chunks‚Äù, which begin with ```{r} and end with ```\nAs an example, here‚Äôs a simple calculation using R; the syntax is shown along with the output automatically generated.\n\n6 * 4\n\n[1] 24\n\n\nHere is one more example of creating a plot using an inbuilt dataset within R.\n\nmtcars |&gt; \n  plot()\n\n\n\n\n\n\n\n\n\n\n\nThere are a variety of options for how to handle the code and its output, called 'execution options'. These options are specified at the start of the code chunk, and begin with #|\nFor example, let us run the above code chunks with additional execution options:\n\n\n\n\n\n\n#| echo: true\n#| eval: false\n\n6 * 4\n\n\n\n\n\n6 * 4\n\n\n\n\n\n\nNote that the code has been printed, but not evaluated (the answer, has not been printed).\n\n\n\n\n\n\n\n#| echo: false\n#| eval: true\n\nmtcars |&gt; \n  plot()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdditionally you can use the option code-fold to hide the code chunk, and reveal only when needed.\n\n\n\n\n#| code-fold: true\n\n# Load Packages\nlibrary(ggstatsplot)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n\n# Load Data\npenguins &lt;- \n  data(penguins) |&gt; \n  get()\n\n# Remove missing values\npenguins &lt;- \n  penguins |&gt; \n  drop_na()\n\n# Create a plot\n\nggbetweenstats(\n    data = penguins,\n    x = species,\n    y = bill_length_mm )\n\n\n\n\n\n\nCode\n# Load Packages\nlibrary(ggstatsplot)\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n\n# Load Data\npenguins &lt;- \n  data(penguins) |&gt; \n  get()\n\n# Remove missing values\npenguins &lt;- \n  penguins |&gt; \n  drop_na()\n\n# Create a plot\n\nggbetweenstats(\n    data = penguins,\n    x = species,\n    y = bill_length_mm )\n\n\n\n\n\n\n\n\nNote that the the output has been printed, however, if you want to see the code which produced this plot, you can click on the interactive Code button.\n\n\n\n\n\n\n\nAnother way to organize a report is to present information in different tabs.\nSimilarly, as before, this is coded using ::: to denote the start and end of the information to be presented in tabs.\nLevel 3 headings (specified using ###) are used as the tab title and denote the start of each new tab.\nHere a simple example:\n\n\n\n\n::: {.panel-tabset}\n\n### Panel 1\nContent of panel 1\n\n### Panel 2\n\n```{r}\nmtcars |&gt; \n  plot()\n```\n\n:::\n\n\n\n\n\nPanel 1Panel 2\n\n\nContent of panel 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo create and work with columns, use ::: or ::::. Like brackets, these are used to indicate the start and end the content to be placed in columns.\nHere‚Äôs an example of a Two Column Layout:\n\n\nContent of column 1:\n\nBullet point 1\nBullet point 1\nBullet point 1\n\n\nContent of column 2:\nThis can be an image as well:\n\n\n\n\n\n\n::: columns\n::: column\nContent of column 1:\n\n-   Bullet point 1\n-   Bullet point 1\n-   Bullet point 1\n:::\n\n::: column\nContent of column 2:\n\nThis can be an image as well:\n\n![](images/quarto_logo.png){width=\"50%\"}\n:::\n:::\n\n\n\nCallouts are used to draw extra attention to certain concepts, or to more clearly indicate that certain content is supplemental or applicable to only some scenarios.\nCallouts start with ::: {.callout-note}, then there‚Äôs the content, and it ends with :::.\nThere are five types of callouts:\n\n\n:::{.callout-note}\nThis is a callout block of the type \"note\".\n:::\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis is a callout block of the type ‚Äúnote‚Äù.\n\n\n\n\n\n:::{.callout-caution collapse=\"true\"}\nCallouts can be collapsible. \n:::\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\nCallouts can be collapsible.\n\n\n\n\n\n\n:::{.callout-important}\n# My heading\nThe first heading used within the callout \nis used as the callout heading.\n:::\n\n\n\n\n\n\n\n\nMy heading\n\n\n\nThe first heading used within the callout is used as the callout heading.\n\n\n\n\n\n:::{.callout-tip icon=false}\nThe icon can also be hidden, like this. \n:::\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe icon can also be hidden, like this.\n\n\n\n\n\n:::{.callout-caution}\nThis is a caution callout\n:::\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nThis is a caution callout",
    "crumbs": [
      "Foundations",
      "Meet Quarto!"
    ]
  },
  {
    "objectID": "foundations/chap_meet_quarto.html#heading-2",
    "href": "foundations/chap_meet_quarto.html#heading-2",
    "title": "Heading 1",
    "section": "",
    "text": "Bold text like this or this\nItalicize text like this or this\nClickable link: https://google.com\nHyperlink\n\nBullet point (nordered lists)\nHyphen, follwed by ‚Äòtab‚Äô\n\n\nOrdered list\nNumber, period, then ‚Äòtab‚Äô\n\n\n\n\n\nVar1\nVar2\n\n\n\n\nObservation 1\n11\n21\n\n\nObservation 2\n12\n22\n\n\nObservation 3\n12\n23",
    "crumbs": [
      "Foundations",
      "Meet Quarto!"
    ]
  },
  {
    "objectID": "chap_first_document.html",
    "href": "chap_first_document.html",
    "title": "Communicate Research Effectively with R",
    "section": "",
    "text": "Welcome to the world of Quarto, where creating beautiful and interactive documents has never been simpler! Whether you‚Äôre a seasoned writer, a data enthusiast, or just starting out, Quarto empowers you to craft compelling content that informs, engages, and stands out. Today, we‚Äôll embark on a journey to create your first Quarto document, guiding you through every step from setup to publication.\n\n\nOpen RStudio and navigate to File &gt; New File &gt; Quarto Document. Here comes the fun part - choosing your format and theme!\n\nFormats: HTML, PDF, Word, and more - pick the one that best suits your needs.\nThemes: From clean and elegant to playful and vibrant, select a theme that reflects your style.\n\nFor this tutorial, we‚Äôll create an HTML document with the ‚Äúdefault‚Äù theme. Once you‚Äôve made your selections, click ‚ÄúCreate‚Äù to generate your new Quarto document.\n\n\n\nQuarto leverages Markdown, a simple yet powerful language for writing. Think of it as plain text on steroids, allowing you to format headings, paragraphs, quotes, and even code, all through intuitive symbols.\n\n\n\nWelcome to the wondrous world of Markdown within Quarto, where crafting compelling content becomes a dance between text and code! This tutorial equips you with the essential tools to weave narrative, integrate R, and create stunning documents.\n\n\nMarkdown embraces simplicity, using symbols to format your text beautifully. Imagine it as a secret code for writers:\n\nHeadings: Announce your sections with # for main titles, ## for subtitles, and so on.\nParagraphs: Just hit enter to separate paragraphs, keeping your text clear and readable.\n\nEmphasis: Highlight key points with **bold** for bold and _italics_ for emphasis.\nLists: Organize information with * or - for unordered lists and 1. or a. for ordered ones.\nQuotes: Share impactful thoughts with &gt; quotes.\n\n\n\n\nOpen a new Quarto document and practice these basics. Craft a mini-blog post with a title, headings, paragraphs, and a bulleted list.\n\n\n\n\n\nQuarto‚Äôs magic lies in marrying text and R code seamlessly. Encapsulate your R magic within ```{r} chunks:\n\nprint(\"Hello from R!\")\n\n[1] \"Hello from R!\"\n\n1 + 2\n\n[1] 3\n\n\nClick the ‚ÄúRun‚Äù button, and voila! R executes the code, displaying the output right within your document.\n\n\n\nAdd an R chunk that calculates the average of numbers and displays the result within your blog post.\n\n\n\n\n\nMarkdown offers more than just the basics. Spice up your content with these gems:\n\nLinks: Connect readers to further information with [text](link).\nImages: Showcase visuals with ![alt text](image.jpg).\nCode Blocks: Highlight code snippets using triple backticks and language specificators.\nTables: Organize data clearly with | Column 1 | Column 2 |, adding rows and formatting as needed.\n\n\n\n\nAdd a link to an interesting website, incorporate an image related to your blog post, and create a simple table using Markdown syntax.\n\n\n\n\n\nExplore Quarto‚Äôs documentation for a deeper dive:\n\nThemes: Choose a theme that reflects your style and brand.\nInteractive Elements: Craft dynamic charts, dashboards, and even embed live R sessions.\nOutput Formats: Export your work as HTML, PDF, Word, and more.\n\nRemember: Experimentation is key! Practice, explore, and unleash the power of Markdown and Quarto.\n\n\n\n\n\nQuarto Markdown Guide: https://quarto.org/docs/authoring/markdown-basics.html\nMarkdown Guide: https://www.markdownguide.org/\nRStudio Blogdown Package: https://github.com/rstudio/blogdown",
    "crumbs": [
      "Creating your first document"
    ]
  },
  {
    "objectID": "chap_first_document.html#creating-your-first-document",
    "href": "chap_first_document.html#creating-your-first-document",
    "title": "Communicate Research Effectively with R",
    "section": "",
    "text": "Welcome to the world of Quarto, where creating beautiful and interactive documents has never been simpler! Whether you‚Äôre a seasoned writer, a data enthusiast, or just starting out, Quarto empowers you to craft compelling content that informs, engages, and stands out. Today, we‚Äôll embark on a journey to create your first Quarto document, guiding you through every step from setup to publication.\n\n\nOpen RStudio and navigate to File &gt; New File &gt; Quarto Document. Here comes the fun part - choosing your format and theme!\n\nFormats: HTML, PDF, Word, and more - pick the one that best suits your needs.\nThemes: From clean and elegant to playful and vibrant, select a theme that reflects your style.\n\nFor this tutorial, we‚Äôll create an HTML document with the ‚Äúdefault‚Äù theme. Once you‚Äôve made your selections, click ‚ÄúCreate‚Äù to generate your new Quarto document.\n\n\n\nQuarto leverages Markdown, a simple yet powerful language for writing. Think of it as plain text on steroids, allowing you to format headings, paragraphs, quotes, and even code, all through intuitive symbols.\n\n\n\nWelcome to the wondrous world of Markdown within Quarto, where crafting compelling content becomes a dance between text and code! This tutorial equips you with the essential tools to weave narrative, integrate R, and create stunning documents.\n\n\nMarkdown embraces simplicity, using symbols to format your text beautifully. Imagine it as a secret code for writers:\n\nHeadings: Announce your sections with # for main titles, ## for subtitles, and so on.\nParagraphs: Just hit enter to separate paragraphs, keeping your text clear and readable.\n\nEmphasis: Highlight key points with **bold** for bold and _italics_ for emphasis.\nLists: Organize information with * or - for unordered lists and 1. or a. for ordered ones.\nQuotes: Share impactful thoughts with &gt; quotes.\n\n\n\n\nOpen a new Quarto document and practice these basics. Craft a mini-blog post with a title, headings, paragraphs, and a bulleted list.\n\n\n\n\n\nQuarto‚Äôs magic lies in marrying text and R code seamlessly. Encapsulate your R magic within ```{r} chunks:\n\nprint(\"Hello from R!\")\n\n[1] \"Hello from R!\"\n\n1 + 2\n\n[1] 3\n\n\nClick the ‚ÄúRun‚Äù button, and voila! R executes the code, displaying the output right within your document.\n\n\n\nAdd an R chunk that calculates the average of numbers and displays the result within your blog post.\n\n\n\n\n\nMarkdown offers more than just the basics. Spice up your content with these gems:\n\nLinks: Connect readers to further information with [text](link).\nImages: Showcase visuals with ![alt text](image.jpg).\nCode Blocks: Highlight code snippets using triple backticks and language specificators.\nTables: Organize data clearly with | Column 1 | Column 2 |, adding rows and formatting as needed.\n\n\n\n\nAdd a link to an interesting website, incorporate an image related to your blog post, and create a simple table using Markdown syntax.\n\n\n\n\n\nExplore Quarto‚Äôs documentation for a deeper dive:\n\nThemes: Choose a theme that reflects your style and brand.\nInteractive Elements: Craft dynamic charts, dashboards, and even embed live R sessions.\nOutput Formats: Export your work as HTML, PDF, Word, and more.\n\nRemember: Experimentation is key! Practice, explore, and unleash the power of Markdown and Quarto.\n\n\n\n\n\nQuarto Markdown Guide: https://quarto.org/docs/authoring/markdown-basics.html\nMarkdown Guide: https://www.markdownguide.org/\nRStudio Blogdown Package: https://github.com/rstudio/blogdown",
    "crumbs": [
      "Creating your first document"
    ]
  },
  {
    "objectID": "chap_first_article.html",
    "href": "chap_first_article.html",
    "title": "Communicate Research Effectively with R",
    "section": "",
    "text": "Now that you have created your first document in RStudio using Quarto, let us now go ahead and create your first article.\nThe article should have the following structure:\n\nIntroduction\nRationale\nObjectives\nMethodology\nResults\nDiscussion\nConclusion\nReferences\n\nLet us now incorparate what we learned in the previous sessions and apply it here.\nYou can use the first level and second level headings ## and ### for the sections and subsections.\nWe will also demonstrate how to add a figure, a table and a couple of references to your article also.\n\n\nQuarto includes a number of features aimed at making it easier to work with figures and subfigures, as well as for laying out panels that contain multiple figures, tables, or other content.\nYou can add a figure more than one ways.\n\n\n![IAPSMCON Logo](iapsmcon_logo.png)\n\n\n\nIAPSMCON Logo\n\n\n\n\n\n```{r}\n#| fig-cap: \"IAPSMCON Logo\"\nknitr::include_graphics(here::here(\"images\", \"iapsmcon_logo.png\"))\n```\n\n\n\n\n\nIAPSMCON Logo\n\n\n\n\nYou can specify the width and alignment of the figure as well.\n![IAPSMCON Logo](iapsmcon_logo.png){width=50% fig-align=\"left\"}\n\n\n\n\n\nYou can read more about customising figures at the Quarto‚Äôs Authoring Figures Documentation\n\n\n\nYou can cross-reference figures by adding an ID with the fig- prefix to them, and then referencing the figure using the @ prefix.\nFor example:\n![IAPSMCON Logo](elephant.png){#fig-iapsm-logo}\n\nThis is illustrated well by @fig-iapsm-logo.\n\n\n\n\n\n\nFigure¬†1: IAPSMCON Logo\n\n\n\nThis is illustrated well by Figure¬†1.\nFor figures produced by executable code chunks, include a label with a fig- prefix to make them cross-referenceable.\nFor example:\nFor a demonstration of a correlation plot, see Figure¬†2.\n```{r}\n#| label: fig-corr-plot\n#| fig-cap: \"A correlation plot\"\n\nmtcars |&gt; \nplot()\n```\n\n\n\n\n\n\n\n\nFigure¬†2: A correlation plot\n\n\n\n\n\nYou can also add multiple figures as subfigures.\n```{r}\n#| label: fig-subfigures\n#| fig-cap: \"Subfigures\"\n#| fig-subcap: \n#|   - \"IAPSMCON 2024 Logo\"\n#|   - \"Correlation Plot of the `mtcars` dataset\"\n#| layout-ncol: 2\n\nknitr::include_graphics(here::here(\"images\", \"iapsmcon_logo.png\"))\nmtcars |&gt; plot\n```\nknitr::include_graphics(here::here(\"images\", \"iapsmcon_logo.png\"))\nmtcars |&gt; plot()\n\n\n\n\n\n\n\n\n\n\n\n(a) IAPSMCON 2024 Logo\n\n\n\n\n\n\n\n\n\n\n\n(b) Correlation Plot of the mtcars dataset\n\n\n\n\n\n\n\nFigure¬†3: Subfigures\n\n\n\n\n\n\n\nQuarto includes a number of features aimed at making it easy to to author and customize markdown table output, including:\n\nSpecifying column alignment and widths.\nProviding captions, subcaptions, and cross-references.\nGenerating tables dynamically from executable code cells.\n\n\n\n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 12      | 12   |    12 |   12   |\n| 123     | 123  |   123 |  123   |\n| 1       | 1    |     1 |   1    |\n\n: Demonstration of pipe table syntax\n\n\nDemonstration of pipe table syntax\n\n\nDefault\nLeft\nRight\nCenter\n\n\n\n\n12\n12\n12\n12\n\n\n123\n123\n123\n123\n\n\n1\n1\n1\n1\n\n\n\n\n\nYou can generate Markdown tables from this website https://www.tablesgenerator.com/markdown_tables\nYou can also add tables using R Code Chunks\n```{r}\n#| label: tbl-my-first-table\n#| tbl-cap: \"This is my first table\"\n\npressure |&gt; \n  gtsummary::tbl_summary()\n\n```\n\n\n\n\nTable¬†1: This is my first table\n\n\n\n\n\n\n\n\n\nCharacteristic\nN = 191\n\n\n\n\ntemperature\n180 (90, 270)\n\n\npressure\n9 (0, 127)\n\n\n\n1 Median (IQR)\n\n\n\n\n\n\n\n\n\n\n\nThis is how you can refer to the table @tbl-my-first-table i.e. Table¬†1.\n\n\n\nQuarto will use Pandoc to automatically generate citations and a bibliography in a number of styles. To use this capability, you will need:\n\nA quarto document formatted with citations.\nA bibliographic data source, for example a BibLaTeX (.bib) or BibTeX (.bibtex) file.\nOptionally, a CSL file which specifies the formatting to use when generating the citations and bibliography.\n\nQuarto uses the standard Pandoc markdown representation for citations (e.g.¬†[@citation]) ‚Äî citations go inside square brackets and are separated by semicolons. Each citation must have a key, composed of @ + the citation identifier from the database, and may optionally have a prefix, a locator, and a suffix.\nFor Example:\nWhen you type the following:\n- This is a reference to the famous article by Hadley Wickham on Tidy Data. [@wickham2014jss]\nThis is what you get:\n\nThis is a reference to the famous article by Hadley Wickham on Tidy Data. (Wickham 2014)\n\n\n\n\nYou can add bibliography to your document by specifying it in the YAML as below.\n---\ntitle: \"My Document\"\nbibliography: references.bib\n---\nYou do not have to worry much about these things as RStudio and Quarto will take care of it for you!",
    "crumbs": [
      "Creating your first article in R"
    ]
  },
  {
    "objectID": "chap_first_article.html#creating-your-first-article-in-r",
    "href": "chap_first_article.html#creating-your-first-article-in-r",
    "title": "Communicate Research Effectively with R",
    "section": "",
    "text": "Now that you have created your first document in RStudio using Quarto, let us now go ahead and create your first article.\nThe article should have the following structure:\n\nIntroduction\nRationale\nObjectives\nMethodology\nResults\nDiscussion\nConclusion\nReferences\n\nLet us now incorparate what we learned in the previous sessions and apply it here.\nYou can use the first level and second level headings ## and ### for the sections and subsections.\nWe will also demonstrate how to add a figure, a table and a couple of references to your article also.\n\n\nQuarto includes a number of features aimed at making it easier to work with figures and subfigures, as well as for laying out panels that contain multiple figures, tables, or other content.\nYou can add a figure more than one ways.\n\n\n![IAPSMCON Logo](iapsmcon_logo.png)\n\n\n\nIAPSMCON Logo\n\n\n\n\n\n```{r}\n#| fig-cap: \"IAPSMCON Logo\"\nknitr::include_graphics(here::here(\"images\", \"iapsmcon_logo.png\"))\n```\n\n\n\n\n\nIAPSMCON Logo\n\n\n\n\nYou can specify the width and alignment of the figure as well.\n![IAPSMCON Logo](iapsmcon_logo.png){width=50% fig-align=\"left\"}\n\n\n\n\n\nYou can read more about customising figures at the Quarto‚Äôs Authoring Figures Documentation\n\n\n\nYou can cross-reference figures by adding an ID with the fig- prefix to them, and then referencing the figure using the @ prefix.\nFor example:\n![IAPSMCON Logo](elephant.png){#fig-iapsm-logo}\n\nThis is illustrated well by @fig-iapsm-logo.\n\n\n\n\n\n\nFigure¬†1: IAPSMCON Logo\n\n\n\nThis is illustrated well by Figure¬†1.\nFor figures produced by executable code chunks, include a label with a fig- prefix to make them cross-referenceable.\nFor example:\nFor a demonstration of a correlation plot, see Figure¬†2.\n```{r}\n#| label: fig-corr-plot\n#| fig-cap: \"A correlation plot\"\n\nmtcars |&gt; \nplot()\n```\n\n\n\n\n\n\n\n\nFigure¬†2: A correlation plot\n\n\n\n\n\nYou can also add multiple figures as subfigures.\n```{r}\n#| label: fig-subfigures\n#| fig-cap: \"Subfigures\"\n#| fig-subcap: \n#|   - \"IAPSMCON 2024 Logo\"\n#|   - \"Correlation Plot of the `mtcars` dataset\"\n#| layout-ncol: 2\n\nknitr::include_graphics(here::here(\"images\", \"iapsmcon_logo.png\"))\nmtcars |&gt; plot\n```\nknitr::include_graphics(here::here(\"images\", \"iapsmcon_logo.png\"))\nmtcars |&gt; plot()\n\n\n\n\n\n\n\n\n\n\n\n(a) IAPSMCON 2024 Logo\n\n\n\n\n\n\n\n\n\n\n\n(b) Correlation Plot of the mtcars dataset\n\n\n\n\n\n\n\nFigure¬†3: Subfigures\n\n\n\n\n\n\n\nQuarto includes a number of features aimed at making it easy to to author and customize markdown table output, including:\n\nSpecifying column alignment and widths.\nProviding captions, subcaptions, and cross-references.\nGenerating tables dynamically from executable code cells.\n\n\n\n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 12      | 12   |    12 |   12   |\n| 123     | 123  |   123 |  123   |\n| 1       | 1    |     1 |   1    |\n\n: Demonstration of pipe table syntax\n\n\nDemonstration of pipe table syntax\n\n\nDefault\nLeft\nRight\nCenter\n\n\n\n\n12\n12\n12\n12\n\n\n123\n123\n123\n123\n\n\n1\n1\n1\n1\n\n\n\n\n\nYou can generate Markdown tables from this website https://www.tablesgenerator.com/markdown_tables\nYou can also add tables using R Code Chunks\n```{r}\n#| label: tbl-my-first-table\n#| tbl-cap: \"This is my first table\"\n\npressure |&gt; \n  gtsummary::tbl_summary()\n\n```\n\n\n\n\nTable¬†1: This is my first table\n\n\n\n\n\n\n\n\n\nCharacteristic\nN = 191\n\n\n\n\ntemperature\n180 (90, 270)\n\n\npressure\n9 (0, 127)\n\n\n\n1 Median (IQR)\n\n\n\n\n\n\n\n\n\n\n\nThis is how you can refer to the table @tbl-my-first-table i.e. Table¬†1.\n\n\n\nQuarto will use Pandoc to automatically generate citations and a bibliography in a number of styles. To use this capability, you will need:\n\nA quarto document formatted with citations.\nA bibliographic data source, for example a BibLaTeX (.bib) or BibTeX (.bibtex) file.\nOptionally, a CSL file which specifies the formatting to use when generating the citations and bibliography.\n\nQuarto uses the standard Pandoc markdown representation for citations (e.g.¬†[@citation]) ‚Äî citations go inside square brackets and are separated by semicolons. Each citation must have a key, composed of @ + the citation identifier from the database, and may optionally have a prefix, a locator, and a suffix.\nFor Example:\nWhen you type the following:\n- This is a reference to the famous article by Hadley Wickham on Tidy Data. [@wickham2014jss]\nThis is what you get:\n\nThis is a reference to the famous article by Hadley Wickham on Tidy Data. (Wickham 2014)\n\n\n\n\nYou can add bibliography to your document by specifying it in the YAML as below.\n---\ntitle: \"My Document\"\nbibliography: references.bib\n---\nYou do not have to worry much about these things as RStudio and Quarto will take care of it for you!",
    "crumbs": [
      "Creating your first article in R"
    ]
  },
  {
    "objectID": "chap_adding_more.html",
    "href": "chap_adding_more.html",
    "title": "Communicate Research Effectively with R",
    "section": "",
    "text": "Now that you know how to add figures, tables and references, you can go beyond the basics and add more elements to you research article.\n\nAdding Table of Contents\nAdding List of Tables/Figures\nAdding Chapters\nAdding Appendices\nMultiple Outputs\n\n\n\nYou can add Table of Contents to you article by adding the toc: true in your YAML.\nFor Example:\n---\ntitle: \"My Article\"\nformat: \n  html: \n    toc: true\n---\nYou can also number the sections and specify the depth of the table of contents by specifying the depth and numbering options.\n---\ntitle: \"My Article\"\nformat: \n  html:\n    toc: true\n    toc-depth: 3\n    number-sections: TRUE\n---\nYou can also add the List of Tables and List of Figures by adding lot: true and lof: true in the YAML.\n---\ntitle: \"My Article\"\nformat: \n  html: \n    toc: true\n    lot: true\n    lof: true\n---",
    "crumbs": [
      "Doing More with Quarto"
    ]
  },
  {
    "objectID": "chap_adding_more.html#doing-more-with-quarto",
    "href": "chap_adding_more.html#doing-more-with-quarto",
    "title": "Communicate Research Effectively with R",
    "section": "",
    "text": "Now that you know how to add figures, tables and references, you can go beyond the basics and add more elements to you research article.\n\nAdding Table of Contents\nAdding List of Tables/Figures\nAdding Chapters\nAdding Appendices\nMultiple Outputs\n\n\n\nYou can add Table of Contents to you article by adding the toc: true in your YAML.\nFor Example:\n---\ntitle: \"My Article\"\nformat: \n  html: \n    toc: true\n---\nYou can also number the sections and specify the depth of the table of contents by specifying the depth and numbering options.\n---\ntitle: \"My Article\"\nformat: \n  html:\n    toc: true\n    toc-depth: 3\n    number-sections: TRUE\n---\nYou can also add the List of Tables and List of Figures by adding lot: true and lof: true in the YAML.\n---\ntitle: \"My Article\"\nformat: \n  html: \n    toc: true\n    lot: true\n    lof: true\n---",
    "crumbs": [
      "Doing More with Quarto"
    ]
  }
]